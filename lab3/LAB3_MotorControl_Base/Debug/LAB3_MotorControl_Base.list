
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ecc  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080070c4  080070c4  000080c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070dc  080070dc  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080070dc  080070dc  000080dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070e4  080070e4  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e4  080070e4  000080e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070e8  080070e8  000080e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080070ec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  2000000c  080070f8  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  080070f8  00009778  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ade  00000000  00000000  0000903a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a95  00000000  00000000  0001fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  000225b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd6  00000000  00000000  000239c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029566  00000000  00000000  0002499e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bae  00000000  00000000  0004df04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104d41  00000000  00000000  00067ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c7f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055bc  00000000  00000000  0016c838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00171df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080070ac 	.word	0x080070ac

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080070ac 	.word	0x080070ac

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 8000528:	b480      	push	{r7}
 800052a:	b089      	sub	sp, #36	@ 0x24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	4413      	add	r3, r2
 800053a:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	607a      	str	r2, [r7, #4]
 8000542:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000544:	2301      	movs	r3, #1
 8000546:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 8000548:	e025      	b.n	8000596 <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d109      	bne.n	8000566 <cobsEncode+0x3e>
            FinishBlock(code);
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	7efa      	ldrb	r2, [r7, #27]
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	607a      	str	r2, [r7, #4]
 800055e:	61fb      	str	r3, [r7, #28]
 8000560:	2301      	movs	r3, #1
 8000562:	76fb      	strb	r3, [r7, #27]
 8000564:	e014      	b.n	8000590 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	1c5a      	adds	r2, r3, #1
 800056a:	607a      	str	r2, [r7, #4]
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 8000572:	7efb      	ldrb	r3, [r7, #27]
 8000574:	3301      	adds	r3, #1
 8000576:	76fb      	strb	r3, [r7, #27]
 8000578:	7efb      	ldrb	r3, [r7, #27]
 800057a:	2bff      	cmp	r3, #255	@ 0xff
 800057c:	d108      	bne.n	8000590 <cobsEncode+0x68>
                FinishBlock(code);
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	7efa      	ldrb	r2, [r7, #27]
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	607a      	str	r2, [r7, #4]
 800058a:	61fb      	str	r3, [r7, #28]
 800058c:	2301      	movs	r3, #1
 800058e:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3301      	adds	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	429a      	cmp	r2, r3
 800059c:	d3d5      	bcc.n	800054a <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	7efa      	ldrb	r2, [r7, #27]
 80005a2:	701a      	strb	r2, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	1c5a      	adds	r2, r3, #1
 80005a8:	607a      	str	r2, [r7, #4]
 80005aa:	61fb      	str	r3, [r7, #28]
 80005ac:	2301      	movs	r3, #1
 80005ae:	76fb      	strb	r3, [r7, #27]
}
 80005b0:	bf00      	nop
 80005b2:	3724      	adds	r7, #36	@ 0x24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d01c      	beq.n	800060a <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3321      	adds	r3, #33	@ 0x21
 80005d4:	461a      	mov	r2, r3
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	68b8      	ldr	r0, [r7, #8]
 80005da:	f7ff ffa5 	bl	8000528 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3301      	adds	r3, #1
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f103 0121 	add.w	r1, r3, #33	@ 0x21
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	3302      	adds	r3, #2
 80005fe:	b29a      	uxth	r2, r3
 8000600:	2303      	movs	r3, #3
 8000602:	f005 ff47 	bl	8006494 <HAL_UART_Transmit>
 8000606:	4603      	mov	r3, r0
 8000608:	e000      	b.n	800060c <ertc_dlog_send+0x50>
	}

	return 0;
 800060a:	2300      	movs	r3, #0
}
 800060c:	4618      	mov	r0, r3
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c59      	adds	r1, r3, #1
 8000626:	2303      	movs	r3, #3
 8000628:	2201      	movs	r2, #1
 800062a:	f005 ffbc 	bl	80065a6 <HAL_UART_Receive>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d111      	bne.n	8000658 <ertc_dlog_update+0x44>
		switch (logger->rxbuff[0]) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	785b      	ldrb	r3, [r3, #1]
 8000638:	2b41      	cmp	r3, #65	@ 0x41
 800063a:	d002      	beq.n	8000642 <ertc_dlog_update+0x2e>
 800063c:	2b42      	cmp	r3, #66	@ 0x42
 800063e:	d004      	beq.n	800064a <ertc_dlog_update+0x36>
 8000640:	e007      	b.n	8000652 <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
				break;
 8000648:	e006      	b.n	8000658 <ertc_dlog_update+0x44>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
				break;
 8000650:	e002      	b.n	8000658 <ertc_dlog_update+0x44>
			default:
				logger->tx_enable = false;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
		}
	}
	return 0;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	0000      	movs	r0, r0
 8000664:	0000      	movs	r0, r0
	...

08000668 <HAL_TIM_PeriodElapsedCallback>:
	float u1, u2;
} data;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	@ 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

	static int kLed = 0;

	// Variables for motor control
	float ReferenceSpeed = -50; // in rpm
 8000670:	4b85      	ldr	r3, [pc, #532]	@ (8000888 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
	float P_gain = 0.871;
 8000674:	4b85      	ldr	r3, [pc, #532]	@ (800088c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000676:	623b      	str	r3, [r7, #32]
	float I_gain = 7.5563;
 8000678:	4b85      	ldr	r3, [pc, #532]	@ (8000890 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800067a:	61fb      	str	r3, [r7, #28]
	static float I_term = 0;


	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a84      	ldr	r2, [pc, #528]	@ (8000894 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	f040 80ea 	bne.w	800085c <HAL_TIM_PeriodElapsedCallback+0x1f4>
	{
		// Read the counter value from the encoder -- TIM3 corresponding to motor 1
			 uint32_t TIM3_CurrentCount;
			 int32_t TIM3_DiffCount;
			 static uint32_t TIM3_PreviousCount = 0;
			 TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 8000688:	4b83      	ldr	r3, [pc, #524]	@ (8000898 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800068e:	61bb      	str	r3, [r7, #24]
			 /* evaluate increment of TIM3 counter from previous count */
			 if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8000690:	4b81      	ldr	r3, [pc, #516]	@ (8000898 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	2b10      	cmp	r3, #16
 800069c:	d112      	bne.n	80006c4 <HAL_TIM_PeriodElapsedCallback+0x5c>
			 {
				 /* check for counter underflow */
				 if (TIM3_CurrentCount <= TIM3_PreviousCount) // Case of no underflow
 800069e:	4b7f      	ldr	r3, [pc, #508]	@ (800089c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	69ba      	ldr	r2, [r7, #24]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d805      	bhi.n	80006b4 <HAL_TIM_PeriodElapsedCallback+0x4c>
				 TIM3_DiffCount = TIM3_CurrentCount- TIM3_PreviousCount;
 80006a8:	4b7c      	ldr	r3, [pc, #496]	@ (800089c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	69ba      	ldr	r2, [r7, #24]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006b2:	e019      	b.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x80>
				 else // Case of underflow
				 TIM3_DiffCount =-((TIM3_ARR_VALUE+1)- TIM3_CurrentCount)- TIM3_PreviousCount;
 80006b4:	4b79      	ldr	r3, [pc, #484]	@ (800089c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	69ba      	ldr	r2, [r7, #24]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	f5a3 6370 	sub.w	r3, r3, #3840	@ 0xf00
 80006c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006c2:	e011      	b.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x80>
			 }
			 else
			 {
				 /* check for counter overflow */
				 if (TIM3_CurrentCount >= TIM3_PreviousCount) // Case of no overflow
 80006c4:	4b75      	ldr	r3, [pc, #468]	@ (800089c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	69ba      	ldr	r2, [r7, #24]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d305      	bcc.n	80006da <HAL_TIM_PeriodElapsedCallback+0x72>
				 TIM3_DiffCount = TIM3_CurrentCount- TIM3_PreviousCount;
 80006ce:	4b73      	ldr	r3, [pc, #460]	@ (800089c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	69ba      	ldr	r2, [r7, #24]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006d8:	e006      	b.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x80>
				 else	// Case of overflow
				 TIM3_DiffCount = ((TIM3_ARR_VALUE+1)- TIM3_PreviousCount) + TIM3_CurrentCount;
 80006da:	4b70      	ldr	r3, [pc, #448]	@ (800089c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	69ba      	ldr	r2, [r7, #24]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 80006e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			 }
			 TIM3_PreviousCount = TIM3_CurrentCount; // Storing the current value
 80006e8:	4a6c      	ldr	r2, [pc, #432]	@ (800089c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	6013      	str	r3, [r2, #0]
			  *
			  */

			 //float motor_rotations = (float) TIM3_DiffCount / TIM3_ARR_VALUE;
			 float CurrentSpeed;
			 CurrentSpeed = ((float)TIM3_DiffCount /(float)TIM3_ARR_VALUE)/ TS * 60.0; // Current speed in rpm
 80006ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006f0:	ee07 3a90 	vmov	s15, r3
 80006f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f8:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80008a0 <HAL_TIM_PeriodElapsedCallback+0x238>
 80006fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000700:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000704:	ed9f 5b58 	vldr	d5, [pc, #352]	@ 8000868 <HAL_TIM_PeriodElapsedCallback+0x200>
 8000708:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800070c:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8000870 <HAL_TIM_PeriodElapsedCallback+0x208>
 8000710:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000714:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000718:	edc7 7a05 	vstr	s15, [r7, #20]


			 // PI Controller
			 float error = (ReferenceSpeed - CurrentSpeed)*RPM2RADS; //rad/sec
 800071c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000720:	edd7 7a05 	vldr	s15, [r7, #20]
 8000724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000728:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800072c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000730:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8000878 <HAL_TIM_PeriodElapsedCallback+0x210>
 8000734:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000738:	ed9f 5b4d 	vldr	d5, [pc, #308]	@ 8000870 <HAL_TIM_PeriodElapsedCallback+0x208>
 800073c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000740:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000744:	edc7 7a04 	vstr	s15, [r7, #16]
			 float P_term = P_gain*error;
 8000748:	ed97 7a08 	vldr	s14, [r7, #32]
 800074c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000754:	edc7 7a03 	vstr	s15, [r7, #12]
			 I_term = I_term + I_gain*TS*error;
 8000758:	4b52      	ldr	r3, [pc, #328]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800075a:	edd3 7a00 	vldr	s15, [r3]
 800075e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000762:	edd7 7a07 	vldr	s15, [r7, #28]
 8000766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800076a:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8000868 <HAL_TIM_PeriodElapsedCallback+0x200>
 800076e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000772:	edd7 7a04 	vldr	s15, [r7, #16]
 8000776:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800077a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800077e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000782:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000786:	4b47      	ldr	r3, [pc, #284]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000788:	edc3 7a00 	vstr	s15, [r3]
			 float Output = P_term+I_term; // volt
 800078c:	4b45      	ldr	r3, [pc, #276]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800078e:	edd3 7a00 	vldr	s15, [r3]
 8000792:	ed97 7a03 	vldr	s14, [r7, #12]
 8000796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800079a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			 if(Output > 6.0) Output = 6.0;
 800079e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80007a2:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80007a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ae:	dd01      	ble.n	80007b4 <HAL_TIM_PeriodElapsedCallback+0x14c>
 80007b0:	4b3d      	ldr	r3, [pc, #244]	@ (80008a8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
			 if(Output <-6.0) Output = -6.0;
 80007b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80007b8:	eeb9 7a08 	vmov.f32	s14, #152	@ 0xc0c00000 -6.0
 80007bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c4:	d501      	bpl.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x162>
 80007c6:	4b39      	ldr	r3, [pc, #228]	@ (80008ac <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28


			// Set the correct PWM Value -- motor 1
			 int32_t duty;
			 /* calculate duty properly */
			 duty = Output*V2DUTY;
 80007ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80007ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007d2:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 8000880 <HAL_TIM_PeriodElapsedCallback+0x218>
 80007d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007da:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007de:	ee17 3a90 	vmov	r3, s15
 80007e2:	60bb      	str	r3, [r7, #8]

			 if (duty >= 0) { // rotate forward
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db08      	blt.n	80007fc <HAL_TIM_PeriodElapsedCallback+0x194>
			 /* alternate between forward and coast */
			 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty);
 80007ea:	4b31      	ldr	r3, [pc, #196]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	635a      	str	r2, [r3, #52]	@ 0x34
			 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80007f2:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2200      	movs	r2, #0
 80007f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80007fa:	e008      	b.n	800080e <HAL_TIM_PeriodElapsedCallback+0x1a6>
			 /* alternate between forward and brake, TIM8_ARR_VALUE is a define */
			 /* __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
			 * __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)(TIM8_ARR_VALUE- duty));
			 */
			 } else { // rotate backward
			 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80007fc:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	635a      	str	r2, [r3, #52]	@ 0x34
			 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty);
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	425a      	negs	r2, r3
 8000808:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	639a      	str	r2, [r3, #56]	@ 0x38
			 }


     	/*	Prepare data packet */
		data.w1 = Output;
 800080e:	4a29      	ldr	r2, [pc, #164]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000812:	6013      	str	r3, [r2, #0]

		data.w2 = duty;
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	ee07 3a90 	vmov	s15, r3
 800081a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800081e:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000820:	edc3 7a01 	vstr	s15, [r3, #4]
		data.u1 = CurrentSpeed;
 8000824:	4a23      	ldr	r2, [pc, #140]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	6093      	str	r3, [r2, #8]
		data.u2 = 0;
 800082a:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	60da      	str	r2, [r3, #12]

		ertc_dlog_send(&logger, &data, sizeof(data));
 8000832:	2210      	movs	r2, #16
 8000834:	491f      	ldr	r1, [pc, #124]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000836:	4820      	ldr	r0, [pc, #128]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000838:	f7ff fec0 	bl	80005bc <ertc_dlog_send>

		// Indicate that the program is running
		if(++kLed >= 10)
 800083c:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b09      	cmp	r3, #9
 800084c:	dd06      	ble.n	800085c <HAL_TIM_PeriodElapsedCallback+0x1f4>
		{
			kLed = 0;
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000854:	2180      	movs	r1, #128	@ 0x80
 8000856:	481a      	ldr	r0, [pc, #104]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000858:	f002 fc1f 	bl	800309a <HAL_GPIO_TogglePin>
		}
	}
}
 800085c:	bf00      	nop
 800085e:	3730      	adds	r7, #48	@ 0x30
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	f3af 8000 	nop.w
 8000868:	47ae147b 	.word	0x47ae147b
 800086c:	3f847ae1 	.word	0x3f847ae1
 8000870:	00000000 	.word	0x00000000
 8000874:	404e0000 	.word	0x404e0000
 8000878:	54442d18 	.word	0x54442d18
 800087c:	400921fb 	.word	0x400921fb
 8000880:	aaaaaaab 	.word	0xaaaaaaab
 8000884:	4040aaaa 	.word	0x4040aaaa
 8000888:	c2480000 	.word	0xc2480000
 800088c:	3f5ef9db 	.word	0x3f5ef9db
 8000890:	40f1cd36 	.word	0x40f1cd36
 8000894:	40001000 	.word	0x40001000
 8000898:	20000214 	.word	0x20000214
 800089c:	20000760 	.word	0x20000760
 80008a0:	456ff000 	.word	0x456ff000
 80008a4:	20000764 	.word	0x20000764
 80008a8:	40c00000 	.word	0x40c00000
 80008ac:	c0c00000 	.word	0xc0c00000
 80008b0:	20000344 	.word	0x20000344
 80008b4:	20000750 	.word	0x20000750
 80008b8:	20000684 	.word	0x20000684
 80008bc:	20000768 	.word	0x20000768
 80008c0:	40020400 	.word	0x40020400

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f001 fdfb 	bl	80024c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f884 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 fedc 	bl	800168c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008d4:	f000 feaa 	bl	800162c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80008d8:	f000 f8f0 	bl	8000abc <MX_ADC1_Init>
  MX_I2C1_Init();
 80008dc:	f000 f940 	bl	8000b60 <MX_I2C1_Init>
  MX_I2C2_Init();
 80008e0:	f000 f97e 	bl	8000be0 <MX_I2C2_Init>
  MX_SPI1_Init();
 80008e4:	f000 f9bc 	bl	8000c60 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008e8:	f000 f9f8 	bl	8000cdc <MX_TIM1_Init>
  MX_TIM2_Init();
 80008ec:	f000 fac6 	bl	8000e7c <MX_TIM2_Init>
  MX_TIM3_Init();
 80008f0:	f000 fb5e 	bl	8000fb0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008f4:	f000 fbb2 	bl	800105c <MX_TIM4_Init>
  MX_TIM5_Init();
 80008f8:	f000 fc06 	bl	8001108 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008fc:	f000 fcb4 	bl	8001268 <MX_TIM8_Init>
  MX_UART4_Init();
 8000900:	f000 fdd4 	bl	80014ac <MX_UART4_Init>
  MX_UART5_Init();
 8000904:	f000 fe02 	bl	800150c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000908:	f000 fe30 	bl	800156c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800090c:	f000 fe5e 	bl	80015cc <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000910:	f000 fd7c 	bl	800140c <MX_TIM9_Init>
  MX_TIM6_Init();
 8000914:	f000 fc70 	bl	80011f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  logger.uart_handle = huart3; // for serial
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <main+0xf4>)
 800091a:	4a28      	ldr	r2, [pc, #160]	@ (80009bc <main+0xf8>)
 800091c:	3344      	adds	r3, #68	@ 0x44
 800091e:	4611      	mov	r1, r2
 8000920:	2288      	movs	r2, #136	@ 0x88
 8000922:	4618      	mov	r0, r3
 8000924:	f006 fbb4 	bl	8007090 <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2110      	movs	r1, #16
 800092c:	4824      	ldr	r0, [pc, #144]	@ (80009c0 <main+0xfc>)
 800092e:	f002 fb9b 	bl	8003068 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8000932:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000936:	f001 fe21 	bl	800257c <HAL_Delay>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800093a:	213c      	movs	r1, #60	@ 0x3c
 800093c:	4821      	ldr	r0, [pc, #132]	@ (80009c4 <main+0x100>)
 800093e:	f004 fa8b 	bl	8004e58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000942:	213c      	movs	r1, #60	@ 0x3c
 8000944:	4820      	ldr	r0, [pc, #128]	@ (80009c8 <main+0x104>)
 8000946:	f004 fa87 	bl	8004e58 <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800094a:	2100      	movs	r1, #0
 800094c:	481f      	ldr	r0, [pc, #124]	@ (80009cc <main+0x108>)
 800094e:	f004 f881 	bl	8004a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000952:	2104      	movs	r1, #4
 8000954:	481d      	ldr	r0, [pc, #116]	@ (80009cc <main+0x108>)
 8000956:	f004 f87d 	bl	8004a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800095a:	2108      	movs	r1, #8
 800095c:	481b      	ldr	r0, [pc, #108]	@ (80009cc <main+0x108>)
 800095e:	f004 f879 	bl	8004a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000962:	210c      	movs	r1, #12
 8000964:	4819      	ldr	r0, [pc, #100]	@ (80009cc <main+0x108>)
 8000966:	f004 f875 	bl	8004a54 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800096a:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <main+0x10c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2200      	movs	r2, #0
 8000970:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <main+0x10c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2200      	movs	r2, #0
 8000978:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <main+0x10c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2200      	movs	r2, #0
 8000980:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <main+0x10c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2200      	movs	r2, #0
 8000988:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800098a:	2100      	movs	r1, #0
 800098c:	4810      	ldr	r0, [pc, #64]	@ (80009d0 <main+0x10c>)
 800098e:	f004 f861 	bl	8004a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000992:	2104      	movs	r1, #4
 8000994:	480e      	ldr	r0, [pc, #56]	@ (80009d0 <main+0x10c>)
 8000996:	f004 f85d 	bl	8004a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800099a:	2108      	movs	r1, #8
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <main+0x10c>)
 800099e:	f004 f859 	bl	8004a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80009a2:	210c      	movs	r1, #12
 80009a4:	480a      	ldr	r0, [pc, #40]	@ (80009d0 <main+0x10c>)
 80009a6:	f004 f855 	bl	8004a54 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 80009aa:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <main+0x110>)
 80009ac:	f003 ff22 	bl	80047f4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ertc_dlog_update(&logger);
 80009b0:	4801      	ldr	r0, [pc, #4]	@ (80009b8 <main+0xf4>)
 80009b2:	f7ff fe2f 	bl	8000614 <ertc_dlog_update>
 80009b6:	e7fb      	b.n	80009b0 <main+0xec>
 80009b8:	20000684 	.word	0x20000684
 80009bc:	200005fc 	.word	0x200005fc
 80009c0:	40021000 	.word	0x40021000
 80009c4:	20000214 	.word	0x20000214
 80009c8:	20000260 	.word	0x20000260
 80009cc:	2000017c 	.word	0x2000017c
 80009d0:	20000344 	.word	0x20000344
 80009d4:	200002f8 	.word	0x200002f8

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	@ 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2234      	movs	r2, #52	@ 0x34
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f006 fb25 	bl	8007036 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009fc:	f002 fc9c 	bl	8003338 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a00:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab4 <SystemClock_Config+0xdc>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab4 <SystemClock_Config+0xdc>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0c:	4b29      	ldr	r3, [pc, #164]	@ (8000ab4 <SystemClock_Config+0xdc>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a18:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <SystemClock_Config+0xe0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a20:	4a25      	ldr	r2, [pc, #148]	@ (8000ab8 <SystemClock_Config+0xe0>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <SystemClock_Config+0xe0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a38:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a4c:	2360      	movs	r3, #96	@ 0x60
 8000a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 fcc9 	bl	80033f8 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a6c:	f000 ff40 	bl	80018f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a70:	f002 fc72 	bl	8003358 <HAL_PWREx_EnableOverDrive>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a7a:	f000 ff39 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7e:	230f      	movs	r3, #15
 8000a80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a82:	2302      	movs	r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	2103      	movs	r1, #3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 ff5a 	bl	8003954 <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000aa6:	f000 ff23 	bl	80018f0 <Error_Handler>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3750      	adds	r7, #80	@ 0x50
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40007000 	.word	0x40007000

08000abc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000ad0:	4a21      	ldr	r2, [pc, #132]	@ (8000b58 <MX_ADC1_Init+0x9c>)
 8000ad2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000ad6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ada:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000afe:	4a17      	ldr	r2, [pc, #92]	@ (8000b5c <MX_ADC1_Init+0xa0>)
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b02:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000b1e:	f001 fd51 	bl	80025c4 <HAL_ADC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b28:	f000 fee2 	bl	80018f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_ADC1_Init+0x98>)
 8000b3e:	f001 fd85 	bl	800264c <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b48:	f000 fed2 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000028 	.word	0x20000028
 8000b58:	40012000 	.word	0x40012000
 8000b5c:	0f000001 	.word	0x0f000001

08000b60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <MX_I2C1_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <MX_I2C1_Init+0x7c>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9a:	480e      	ldr	r0, [pc, #56]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b9c:	f002 fa98 	bl	80030d0 <HAL_I2C_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ba6:	f000 fea3 	bl	80018f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bae:	f002 fb2b 	bl	8003208 <HAL_I2CEx_ConfigAnalogFilter>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb8:	f000 fe9a 	bl	80018f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bc0:	f002 fb6d 	bl	800329e <HAL_I2CEx_ConfigDigitalFilter>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bca:	f000 fe91 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000070 	.word	0x20000070
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	20303e5d 	.word	0x20303e5d

08000be0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000be6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c58 <MX_I2C2_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000bec:	4a1b      	ldr	r2, [pc, #108]	@ (8000c5c <MX_I2C2_Init+0x7c>)
 8000bee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000c1c:	f002 fa58 	bl	80030d0 <HAL_I2C_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c26:	f000 fe63 	bl	80018f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000c2e:	f002 faeb 	bl	8003208 <HAL_I2CEx_ConfigAnalogFilter>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c38:	f000 fe5a 	bl	80018f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_I2C2_Init+0x74>)
 8000c40:	f002 fb2d 	bl	800329e <HAL_I2CEx_ConfigDigitalFilter>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c4a:	f000 fe51 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000c4 	.word	0x200000c4
 8000c58:	40005800 	.word	0x40005800
 8000c5c:	20303e5d 	.word	0x20303e5d

08000c60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000c66:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd8 <MX_SPI1_Init+0x78>)
 8000c68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000c6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c78:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000c7a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000cae:	2207      	movs	r2, #7
 8000cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000cba:	2208      	movs	r2, #8
 8000cbc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_SPI1_Init+0x74>)
 8000cc0:	f003 fc96 	bl	80045f0 <HAL_SPI_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cca:	f000 fe11 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000118 	.word	0x20000118
 8000cd8:	40013000 	.word	0x40013000

08000cdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09a      	sub	sp, #104	@ 0x68
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	222c      	movs	r2, #44	@ 0x2c
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f006 f98d 	bl	8007036 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d1c:	4b55      	ldr	r3, [pc, #340]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d1e:	4a56      	ldr	r2, [pc, #344]	@ (8000e78 <MX_TIM1_Init+0x19c>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d22:	4b54      	ldr	r3, [pc, #336]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b52      	ldr	r3, [pc, #328]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000d2e:	4b51      	ldr	r3, [pc, #324]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b4f      	ldr	r3, [pc, #316]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b4c      	ldr	r3, [pc, #304]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d46:	484b      	ldr	r0, [pc, #300]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d48:	f003 fcfd 	bl	8004746 <HAL_TIM_Base_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d52:	f000 fdcd 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d5c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d60:	4619      	mov	r1, r3
 8000d62:	4844      	ldr	r0, [pc, #272]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d64:	f004 fc38 	bl	80055d8 <HAL_TIM_ConfigClockSource>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d6e:	f000 fdbf 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000d72:	4840      	ldr	r0, [pc, #256]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d74:	f003 fdb6 	bl	80048e4 <HAL_TIM_OC_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d7e:	f000 fdb7 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d92:	4619      	mov	r1, r3
 8000d94:	4837      	ldr	r0, [pc, #220]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000d96:	f005 fa05 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000da0:	f000 fda6 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000da4:	2350      	movs	r3, #80	@ 0x50
 8000da6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000dac:	2302      	movs	r3, #2
 8000dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482a      	ldr	r0, [pc, #168]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000dca:	f004 f9db 	bl	8005184 <HAL_TIM_OC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000dd4:	f000 fd8c 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ddc:	2204      	movs	r2, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4824      	ldr	r0, [pc, #144]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000de2:	f004 f9cf 	bl	8005184 <HAL_TIM_OC_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000dec:	f000 fd80 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000df4:	2208      	movs	r2, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	481e      	ldr	r0, [pc, #120]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000dfa:	f004 f9c3 	bl	8005184 <HAL_TIM_OC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000e04:	f000 fd74 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e0c:	220c      	movs	r2, #12
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4818      	ldr	r0, [pc, #96]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000e12:	f004 f9b7 	bl	8005184 <HAL_TIM_OC_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000e1c:	f000 fd68 	bl	80018f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4807      	ldr	r0, [pc, #28]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000e56:	f005 fa33 	bl	80062c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000e60:	f000 fd46 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e64:	4803      	ldr	r0, [pc, #12]	@ (8000e74 <MX_TIM1_Init+0x198>)
 8000e66:	f001 f81b 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 8000e6a:	bf00      	nop
 8000e6c:	3768      	adds	r7, #104	@ 0x68
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000017c 	.word	0x2000017c
 8000e78:	40010000 	.word	0x40010000

08000e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b092      	sub	sp, #72	@ 0x48
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
 8000eac:	615a      	str	r2, [r3, #20]
 8000eae:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000ebe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ec2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ec4:	4b39      	ldr	r3, [pc, #228]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b38      	ldr	r3, [pc, #224]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ed0:	4b36      	ldr	r3, [pc, #216]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed8:	4b34      	ldr	r3, [pc, #208]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	4b33      	ldr	r3, [pc, #204]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee4:	4831      	ldr	r0, [pc, #196]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000ee6:	f003 fc2e 	bl	8004746 <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ef0:	f000 fcfe 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000efa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000efe:	4619      	mov	r1, r3
 8000f00:	482a      	ldr	r0, [pc, #168]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000f02:	f004 fb69 	bl	80055d8 <HAL_TIM_ConfigClockSource>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f0c:	f000 fcf0 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f10:	4826      	ldr	r0, [pc, #152]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000f12:	f003 fd48 	bl	80049a6 <HAL_TIM_PWM_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000f1c:	f000 fce8 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f20:	4822      	ldr	r0, [pc, #136]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000f22:	f003 fe91 	bl	8004c48 <HAL_TIM_IC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f2c:	f000 fce0 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481b      	ldr	r0, [pc, #108]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000f40:	f005 f930 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000f4a:	f000 fcd1 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4e:	2360      	movs	r3, #96	@ 0x60
 8000f50:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	2200      	movs	r2, #0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4811      	ldr	r0, [pc, #68]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000f68:	f004 fa22 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000f72:	f000 fcbd 	bl	80018f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	2208      	movs	r2, #8
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4807      	ldr	r0, [pc, #28]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000f8e:	f004 f973 	bl	8005278 <HAL_TIM_IC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8000f98:	f000 fcaa 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f9c:	4803      	ldr	r0, [pc, #12]	@ (8000fac <MX_TIM2_Init+0x130>)
 8000f9e:	f000 ff7f 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 8000fa2:	bf00      	nop
 8000fa4:	3748      	adds	r7, #72	@ 0x48
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001c8 	.word	0x200001c8

08000fb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	@ 0x30
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2224      	movs	r2, #36	@ 0x24
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 f839 	bl	8007036 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_TIM3_Init+0xa4>)
 8000fd0:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <MX_TIM3_Init+0xa8>)
 8000fd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_TIM3_Init+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_TIM3_Init+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_TIM3_Init+0xa4>)
 8000fe2:	f640 62ff 	movw	r2, #3839	@ 0xeff
 8000fe6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_TIM3_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <MX_TIM3_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001004:	230f      	movs	r3, #15
 8001006:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800100c:	2301      	movs	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001014:	230f      	movs	r3, #15
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	480d      	ldr	r0, [pc, #52]	@ (8001054 <MX_TIM3_Init+0xa4>)
 8001020:	f003 fe74 	bl	8004d0c <HAL_TIM_Encoder_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800102a:	f000 fc61 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	@ (8001054 <MX_TIM3_Init+0xa4>)
 800103c:	f005 f8b2 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001046:	f000 fc53 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3730      	adds	r7, #48	@ 0x30
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000214 	.word	0x20000214
 8001058:	40000400 	.word	0x40000400

0800105c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	@ 0x30
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2224      	movs	r2, #36	@ 0x24
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f005 ffe3 	bl	8007036 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <MX_TIM4_Init+0xa4>)
 800107c:	4a21      	ldr	r2, [pc, #132]	@ (8001104 <MX_TIM4_Init+0xa8>)
 800107e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_TIM4_Init+0xa4>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <MX_TIM4_Init+0xa4>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_TIM4_Init+0xa4>)
 800108e:	f640 62ff 	movw	r2, #3839	@ 0xeff
 8001092:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_TIM4_Init+0xa4>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_TIM4_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010a0:	2303      	movs	r3, #3
 80010a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a8:	2301      	movs	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80010b0:	230f      	movs	r3, #15
 80010b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b8:	2301      	movs	r3, #1
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80010c0:	230f      	movs	r3, #15
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	480d      	ldr	r0, [pc, #52]	@ (8001100 <MX_TIM4_Init+0xa4>)
 80010cc:	f003 fe1e 	bl	8004d0c <HAL_TIM_Encoder_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80010d6:	f000 fc0b 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	@ (8001100 <MX_TIM4_Init+0xa4>)
 80010e8:	f005 f85c 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80010f2:	f000 fbfd 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3730      	adds	r7, #48	@ 0x30
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000260 	.word	0x20000260
 8001104:	40000800 	.word	0x40000800

08001108 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	@ 0x38
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800113a:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 800113c:	4a2d      	ldr	r2, [pc, #180]	@ (80011f4 <MX_TIM5_Init+0xec>)
 800113e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001140:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 800114e:	f04f 32ff 	mov.w	r2, #4294967295
 8001152:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001160:	4823      	ldr	r0, [pc, #140]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 8001162:	f003 faf0 	bl	8004746 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800116c:	f000 fbc0 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001176:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800117a:	4619      	mov	r1, r3
 800117c:	481c      	ldr	r0, [pc, #112]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 800117e:	f004 fa2b 	bl	80055d8 <HAL_TIM_ConfigClockSource>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001188:	f000 fbb2 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800118c:	4818      	ldr	r0, [pc, #96]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 800118e:	f003 fc0a 	bl	80049a6 <HAL_TIM_PWM_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001198:	f000 fbaa 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4811      	ldr	r0, [pc, #68]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 80011ac:	f004 fffa 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80011b6:	f000 fb9b 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ba:	2360      	movs	r3, #96	@ 0x60
 80011bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 80011d2:	f004 f8ed 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80011dc:	f000 fb88 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80011e0:	4803      	ldr	r0, [pc, #12]	@ (80011f0 <MX_TIM5_Init+0xe8>)
 80011e2:	f000 fe5d 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 80011e6:	bf00      	nop
 80011e8:	3738      	adds	r7, #56	@ 0x38
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200002ac 	.word	0x200002ac
 80011f4:	40000c00 	.word	0x40000c00

080011f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_TIM6_Init+0x68>)
 800120a:	4a16      	ldr	r2, [pc, #88]	@ (8001264 <MX_TIM6_Init+0x6c>)
 800120c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_TIM6_Init+0x68>)
 8001210:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001214:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_TIM6_Init+0x68>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 800121c:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_TIM6_Init+0x68>)
 800121e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001222:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001224:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_TIM6_Init+0x68>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800122a:	480d      	ldr	r0, [pc, #52]	@ (8001260 <MX_TIM6_Init+0x68>)
 800122c:	f003 fa8b 	bl	8004746 <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001236:	f000 fb5b 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	@ (8001260 <MX_TIM6_Init+0x68>)
 8001248:	f004 ffac 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001252:	f000 fb4d 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200002f8 	.word	0x200002f8
 8001264:	40001000 	.word	0x40001000

08001268 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b09a      	sub	sp, #104	@ 0x68
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001288:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]
 800129a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	222c      	movs	r2, #44	@ 0x2c
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f005 fec7 	bl	8007036 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012a8:	4b56      	ldr	r3, [pc, #344]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80012aa:	4a57      	ldr	r2, [pc, #348]	@ (8001408 <MX_TIM8_Init+0x1a0>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80012ae:	4b55      	ldr	r3, [pc, #340]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80012b0:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80012b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b53      	ldr	r3, [pc, #332]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 80012bc:	4b51      	ldr	r3, [pc, #324]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80012be:	f240 128f 	movw	r2, #399	@ 0x18f
 80012c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012d6:	484b      	ldr	r0, [pc, #300]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80012d8:	f003 fa35 	bl	8004746 <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80012e2:	f000 fb05 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012f0:	4619      	mov	r1, r3
 80012f2:	4844      	ldr	r0, [pc, #272]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80012f4:	f004 f970 	bl	80055d8 <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80012fe:	f000 faf7 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001302:	4840      	ldr	r0, [pc, #256]	@ (8001404 <MX_TIM8_Init+0x19c>)
 8001304:	f003 fb4f 	bl	80049a6 <HAL_TIM_PWM_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800130e:	f000 faef 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800131e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001322:	4619      	mov	r1, r3
 8001324:	4837      	ldr	r0, [pc, #220]	@ (8001404 <MX_TIM8_Init+0x19c>)
 8001326:	f004 ff3d 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001330:	f000 fade 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001334:	2360      	movs	r3, #96	@ 0x60
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001350:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001354:	2200      	movs	r2, #0
 8001356:	4619      	mov	r1, r3
 8001358:	482a      	ldr	r0, [pc, #168]	@ (8001404 <MX_TIM8_Init+0x19c>)
 800135a:	f004 f829 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001364:	f000 fac4 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001368:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800136c:	2204      	movs	r2, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4824      	ldr	r0, [pc, #144]	@ (8001404 <MX_TIM8_Init+0x19c>)
 8001372:	f004 f81d 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800137c:	f000 fab8 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001380:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001384:	2208      	movs	r2, #8
 8001386:	4619      	mov	r1, r3
 8001388:	481e      	ldr	r0, [pc, #120]	@ (8001404 <MX_TIM8_Init+0x19c>)
 800138a:	f004 f811 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001394:	f000 faac 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001398:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800139c:	220c      	movs	r2, #12
 800139e:	4619      	mov	r1, r3
 80013a0:	4818      	ldr	r0, [pc, #96]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80013a2:	f004 f805 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80013ac:	f000 faa0 	bl	80018f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80013e6:	f004 ff6b 	bl	80062c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 80013f0:	f000 fa7e 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013f4:	4803      	ldr	r0, [pc, #12]	@ (8001404 <MX_TIM8_Init+0x19c>)
 80013f6:	f000 fd53 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 80013fa:	bf00      	nop
 80013fc:	3768      	adds	r7, #104	@ 0x68
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000344 	.word	0x20000344
 8001408:	40010400 	.word	0x40010400

0800140c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_TIM9_Init+0x98>)
 8001426:	4a20      	ldr	r2, [pc, #128]	@ (80014a8 <MX_TIM9_Init+0x9c>)
 8001428:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_TIM9_Init+0x98>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_TIM9_Init+0x98>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001436:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <MX_TIM9_Init+0x98>)
 8001438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <MX_TIM9_Init+0x98>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MX_TIM9_Init+0x98>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800144a:	4816      	ldr	r0, [pc, #88]	@ (80014a4 <MX_TIM9_Init+0x98>)
 800144c:	f003 faab 	bl	80049a6 <HAL_TIM_PWM_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001456:	f000 fa4b 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145a:	2360      	movs	r3, #96	@ 0x60
 800145c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <MX_TIM9_Init+0x98>)
 8001472:	f003 ff9d 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 800147c:	f000 fa38 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2204      	movs	r2, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4807      	ldr	r0, [pc, #28]	@ (80014a4 <MX_TIM9_Init+0x98>)
 8001488:	f003 ff92 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001492:	f000 fa2d 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001496:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <MX_TIM9_Init+0x98>)
 8001498:	f000 fd02 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000390 	.word	0x20000390
 80014a8:	40014000 	.word	0x40014000

080014ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <MX_UART4_Init+0x58>)
 80014b2:	4a15      	ldr	r2, [pc, #84]	@ (8001508 <MX_UART4_Init+0x5c>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80014b6:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <MX_UART4_Init+0x58>)
 80014b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_UART4_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_UART4_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_UART4_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_UART4_Init+0x58>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <MX_UART4_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_UART4_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <MX_UART4_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_UART4_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_UART4_Init+0x58>)
 80014f0:	f004 ff82 	bl	80063f8 <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80014fa:	f000 f9f9 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200003dc 	.word	0x200003dc
 8001508:	40004c00 	.word	0x40004c00

0800150c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_UART5_Init+0x58>)
 8001512:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <MX_UART5_Init+0x5c>)
 8001514:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <MX_UART5_Init+0x58>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_UART5_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_UART5_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_UART5_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_UART5_Init+0x58>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_UART5_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_UART5_Init+0x58>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_UART5_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_UART5_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_UART5_Init+0x58>)
 8001550:	f004 ff52 	bl	80063f8 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800155a:	f000 f9c9 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000464 	.word	0x20000464
 8001568:	40005000 	.word	0x40005000

0800156c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001570:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 8001572:	4a15      	ldr	r2, [pc, #84]	@ (80015c8 <MX_USART1_UART_Init+0x5c>)
 8001574:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001576:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_USART1_UART_Init+0x58>)
 80015b0:	f004 ff22 	bl	80063f8 <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015ba:	f000 f999 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200004ec 	.word	0x200004ec
 80015c8:	40011000 	.word	0x40011000

080015cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 80015d2:	4a14      	ldr	r2, [pc, #80]	@ (8001624 <MX_USART2_UART_Init+0x58>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80015d6:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 80015d8:	4a13      	ldr	r2, [pc, #76]	@ (8001628 <MX_USART2_UART_Init+0x5c>)
 80015da:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015dc:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 80015f0:	220c      	movs	r2, #12
 80015f2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 8001608:	2200      	movs	r2, #0
 800160a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	@ (8001620 <MX_USART2_UART_Init+0x54>)
 800160e:	f004 fef3 	bl	80063f8 <HAL_UART_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001618:	f000 f96a 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000574 	.word	0x20000574
 8001624:	40004400 	.word	0x40004400
 8001628:	000f4240 	.word	0x000f4240

0800162c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001630:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 8001632:	4a15      	ldr	r2, [pc, #84]	@ (8001688 <MX_USART3_UART_Init+0x5c>)
 8001634:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_USART3_UART_Init+0x58>)
 8001670:	f004 fec2 	bl	80063f8 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800167a:	f000 f939 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200005fc 	.word	0x200005fc
 8001688:	40004800 	.word	0x40004800

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08e      	sub	sp, #56	@ 0x38
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a2:	4b8c      	ldr	r3, [pc, #560]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a8b      	ldr	r2, [pc, #556]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b89      	ldr	r3, [pc, #548]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	4b86      	ldr	r3, [pc, #536]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a85      	ldr	r2, [pc, #532]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b83      	ldr	r3, [pc, #524]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d2:	4b80      	ldr	r3, [pc, #512]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a7f      	ldr	r2, [pc, #508]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016d8:	f043 0320 	orr.w	r3, r3, #32
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b7d      	ldr	r3, [pc, #500]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	4b7a      	ldr	r3, [pc, #488]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a79      	ldr	r2, [pc, #484]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b77      	ldr	r3, [pc, #476]	@ (80018d4 <MX_GPIO_Init+0x248>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b74      	ldr	r3, [pc, #464]	@ (80018d4 <MX_GPIO_Init+0x248>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a73      	ldr	r2, [pc, #460]	@ (80018d4 <MX_GPIO_Init+0x248>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b71      	ldr	r3, [pc, #452]	@ (80018d4 <MX_GPIO_Init+0x248>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b6e      	ldr	r3, [pc, #440]	@ (80018d4 <MX_GPIO_Init+0x248>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a6d      	ldr	r2, [pc, #436]	@ (80018d4 <MX_GPIO_Init+0x248>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b6b      	ldr	r3, [pc, #428]	@ (80018d4 <MX_GPIO_Init+0x248>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	4b68      	ldr	r3, [pc, #416]	@ (80018d4 <MX_GPIO_Init+0x248>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a67      	ldr	r2, [pc, #412]	@ (80018d4 <MX_GPIO_Init+0x248>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b65      	ldr	r3, [pc, #404]	@ (80018d4 <MX_GPIO_Init+0x248>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800174a:	4b62      	ldr	r3, [pc, #392]	@ (80018d4 <MX_GPIO_Init+0x248>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a61      	ldr	r2, [pc, #388]	@ (80018d4 <MX_GPIO_Init+0x248>)
 8001750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b5f      	ldr	r3, [pc, #380]	@ (80018d4 <MX_GPIO_Init+0x248>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	2118      	movs	r1, #24
 8001766:	485c      	ldr	r0, [pc, #368]	@ (80018d8 <MX_GPIO_Init+0x24c>)
 8001768:	f001 fc7e 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001772:	485a      	ldr	r0, [pc, #360]	@ (80018dc <MX_GPIO_Init+0x250>)
 8001774:	f001 fc78 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	2140      	movs	r1, #64	@ 0x40
 800177c:	4858      	ldr	r0, [pc, #352]	@ (80018e0 <MX_GPIO_Init+0x254>)
 800177e:	f001 fc73 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001782:	2318      	movs	r3, #24
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	484f      	ldr	r0, [pc, #316]	@ (80018d8 <MX_GPIO_Init+0x24c>)
 800179a:	f001 fab9 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 800179e:	f643 731c 	movw	r3, #16156	@ 0x3f1c
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	484b      	ldr	r0, [pc, #300]	@ (80018e4 <MX_GPIO_Init+0x258>)
 80017b6:	f001 faab 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017ba:	2332      	movs	r3, #50	@ 0x32
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ca:	230b      	movs	r3, #11
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	4844      	ldr	r0, [pc, #272]	@ (80018e8 <MX_GPIO_Init+0x25c>)
 80017d6:	f001 fa9b 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017da:	2386      	movs	r3, #134	@ 0x86
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ea:	230b      	movs	r3, #11
 80017ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	483d      	ldr	r0, [pc, #244]	@ (80018ec <MX_GPIO_Init+0x260>)
 80017f6:	f001 fa8b 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017fa:	f244 0381 	movw	r3, #16513	@ 0x4081
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4832      	ldr	r0, [pc, #200]	@ (80018dc <MX_GPIO_Init+0x250>)
 8001814:	f001 fa7c 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001818:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800182a:	230b      	movs	r3, #11
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	4829      	ldr	r0, [pc, #164]	@ (80018dc <MX_GPIO_Init+0x250>)
 8001836:	f001 fa6b 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800183a:	2340      	movs	r3, #64	@ 0x40
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800184a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184e:	4619      	mov	r1, r3
 8001850:	4823      	ldr	r0, [pc, #140]	@ (80018e0 <MX_GPIO_Init+0x254>)
 8001852:	f001 fa5d 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001856:	2380      	movs	r3, #128	@ 0x80
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	481d      	ldr	r0, [pc, #116]	@ (80018e0 <MX_GPIO_Init+0x254>)
 800186a:	f001 fa51 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800186e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001880:	230a      	movs	r3, #10
 8001882:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	4818      	ldr	r0, [pc, #96]	@ (80018ec <MX_GPIO_Init+0x260>)
 800188c:	f001 fa40 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a2:	4619      	mov	r1, r3
 80018a4:	4811      	ldr	r0, [pc, #68]	@ (80018ec <MX_GPIO_Init+0x260>)
 80018a6:	f001 fa33 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018aa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018bc:	230b      	movs	r3, #11
 80018be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <MX_GPIO_Init+0x254>)
 80018c8:	f001 fa22 	bl	8002d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018cc:	bf00      	nop
 80018ce:	3738      	adds	r7, #56	@ 0x38
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40021400 	.word	0x40021400
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020000 	.word	0x40020000

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  static uint32_t kLed = 0;
	  if(++kLed >= 1000)
 80018f8:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <Error_Handler+0x30>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <Error_Handler+0x30>)
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <Error_Handler+0x30>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800190a:	d3f5      	bcc.n	80018f8 <Error_Handler+0x8>
	  {
		  kLed = 0;
 800190c:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <Error_Handler+0x30>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001912:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001916:	4803      	ldr	r0, [pc, #12]	@ (8001924 <Error_Handler+0x34>)
 8001918:	f001 fbbf 	bl	800309a <HAL_GPIO_TogglePin>
  {
 800191c:	e7ec      	b.n	80018f8 <Error_Handler+0x8>
 800191e:	bf00      	nop
 8001920:	2000076c 	.word	0x2000076c
 8001924:	40020400 	.word	0x40020400

08001928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <HAL_MspInit+0x44>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	4a0e      	ldr	r2, [pc, #56]	@ (800196c <HAL_MspInit+0x44>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001938:	6413      	str	r3, [r2, #64]	@ 0x40
 800193a:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <HAL_MspInit+0x44>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_MspInit+0x44>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	4a08      	ldr	r2, [pc, #32]	@ (800196c <HAL_MspInit+0x44>)
 800194c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001950:	6453      	str	r3, [r2, #68]	@ 0x44
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_MspInit+0x44>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	@ 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a15      	ldr	r2, [pc, #84]	@ (80019e4 <HAL_ADC_MspInit+0x74>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d123      	bne.n	80019da <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_ADC_MspInit+0x78>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <HAL_ADC_MspInit+0x78>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199c:	6453      	str	r3, [r2, #68]	@ 0x44
 800199e:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_ADC_MspInit+0x78>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <HAL_ADC_MspInit+0x78>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a0e      	ldr	r2, [pc, #56]	@ (80019e8 <HAL_ADC_MspInit+0x78>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <HAL_ADC_MspInit+0x78>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 80019c2:	2308      	movs	r3, #8
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c6:	2303      	movs	r3, #3
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	@ (80019ec <HAL_ADC_MspInit+0x7c>)
 80019d6:	f001 f99b 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	@ 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40012000 	.word	0x40012000
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020000 	.word	0x40020000

080019f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0b0      	sub	sp, #192	@ 0xc0
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	2290      	movs	r2, #144	@ 0x90
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f005 fb10 	bl	8007036 <memset>
  if(hi2c->Instance==I2C1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a44      	ldr	r2, [pc, #272]	@ (8001b2c <HAL_I2C_MspInit+0x13c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d13e      	bne.n	8001a9e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a24:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 f9b5 	bl	8003da0 <HAL_RCCEx_PeriphCLKConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001a3c:	f7ff ff58 	bl	80018f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b3b      	ldr	r3, [pc, #236]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	4a3a      	ldr	r2, [pc, #232]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4c:	4b38      	ldr	r3, [pc, #224]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	2312      	movs	r3, #18
 8001a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a72:	2304      	movs	r3, #4
 8001a74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	482d      	ldr	r0, [pc, #180]	@ (8001b34 <HAL_I2C_MspInit+0x144>)
 8001a80:	f001 f946 	bl	8002d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a84:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a88:	4a29      	ldr	r2, [pc, #164]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001a8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a90:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a9c:	e041      	b.n	8001b22 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a25      	ldr	r2, [pc, #148]	@ (8001b38 <HAL_I2C_MspInit+0x148>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d13c      	bne.n	8001b22 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001aa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001aac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 f971 	bl	8003da0 <HAL_RCCEx_PeriphCLKConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001ac4:	f7ff ff14 	bl	80018f0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001acc:	4a18      	ldr	r2, [pc, #96]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001ace:	f043 0320 	orr.w	r3, r3, #32
 8001ad2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae6:	2312      	movs	r3, #18
 8001ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001af8:	2304      	movs	r3, #4
 8001afa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001afe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b02:	4619      	mov	r1, r3
 8001b04:	480d      	ldr	r0, [pc, #52]	@ (8001b3c <HAL_I2C_MspInit+0x14c>)
 8001b06:	f001 f903 	bl	8002d10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001b10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_I2C_MspInit+0x140>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
}
 8001b22:	bf00      	nop
 8001b24:	37c0      	adds	r7, #192	@ 0xc0
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40005800 	.word	0x40005800
 8001b3c:	40021400 	.word	0x40021400

08001b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	@ 0x30
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a33      	ldr	r2, [pc, #204]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d160      	bne.n	8001c24 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a32      	ldr	r2, [pc, #200]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b30      	ldr	r3, [pc, #192]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b92:	4b27      	ldr	r3, [pc, #156]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	4a26      	ldr	r2, [pc, #152]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9e:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001baa:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a20      	ldr	r2, [pc, #128]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bd2:	2305      	movs	r3, #5
 8001bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4815      	ldr	r0, [pc, #84]	@ (8001c34 <HAL_SPI_MspInit+0xf4>)
 8001bde:	f001 f897 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480e      	ldr	r0, [pc, #56]	@ (8001c38 <HAL_SPI_MspInit+0xf8>)
 8001bfe:	f001 f887 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c14:	2305      	movs	r3, #5
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4807      	ldr	r0, [pc, #28]	@ (8001c3c <HAL_SPI_MspInit+0xfc>)
 8001c20:	f001 f876 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c24:	bf00      	nop
 8001c26:	3730      	adds	r7, #48	@ 0x30
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40013000 	.word	0x40013000
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40020c00 	.word	0x40020c00
 8001c3c:	40021800 	.word	0x40021800

08001c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	@ 0x38
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d5c <HAL_TIM_Base_MspInit+0x11c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10c      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c62:	4b3f      	ldr	r3, [pc, #252]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a3e      	ldr	r2, [pc, #248]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	623b      	str	r3, [r7, #32]
 8001c78:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001c7a:	e06b      	b.n	8001d54 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c84:	d129      	bne.n	8001cda <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c86:	4b36      	ldr	r3, [pc, #216]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4a35      	ldr	r2, [pc, #212]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c92:	4b33      	ldr	r3, [pc, #204]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	4b30      	ldr	r3, [pc, #192]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4824      	ldr	r0, [pc, #144]	@ (8001d64 <HAL_TIM_Base_MspInit+0x124>)
 8001cd4:	f001 f81c 	bl	8002d10 <HAL_GPIO_Init>
}
 8001cd8:	e03c      	b.n	8001d54 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a22      	ldr	r2, [pc, #136]	@ (8001d68 <HAL_TIM_Base_MspInit+0x128>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d10c      	bne.n	8001cfe <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697b      	ldr	r3, [r7, #20]
}
 8001cfc:	e02a      	b.n	8001d54 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1a      	ldr	r2, [pc, #104]	@ (8001d6c <HAL_TIM_Base_MspInit+0x12c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d114      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	4a14      	ldr	r2, [pc, #80]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2101      	movs	r1, #1
 8001d24:	2036      	movs	r0, #54	@ 0x36
 8001d26:	f000 ffbc 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d2a:	2036      	movs	r0, #54	@ 0x36
 8001d2c:	f000 ffd5 	bl	8002cda <HAL_NVIC_EnableIRQ>
}
 8001d30:	e010      	b.n	8001d54 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <HAL_TIM_Base_MspInit+0x130>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d10b      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d40:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001d42:	f043 0302 	orr.w	r3, r3, #2
 8001d46:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_TIM_Base_MspInit+0x120>)
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3738      	adds	r7, #56	@ 0x38
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40000c00 	.word	0x40000c00
 8001d6c:	40001000 	.word	0x40001000
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	@ 0x30
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a2e      	ldr	r2, [pc, #184]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d128      	bne.n	8001de8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d96:	4b2e      	ldr	r3, [pc, #184]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a27      	ldr	r2, [pc, #156]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001dc6:	2330      	movs	r3, #48	@ 0x30
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	481c      	ldr	r0, [pc, #112]	@ (8001e54 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001de2:	f000 ff95 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001de6:	e02d      	b.n	8001e44 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1a      	ldr	r2, [pc, #104]	@ (8001e58 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d128      	bne.n	8001e44 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001df2:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	4a16      	ldr	r2, [pc, #88]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfe:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a10      	ldr	r2, [pc, #64]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e10:	f043 0308 	orr.w	r3, r3, #8
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001e22:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e34:	2302      	movs	r3, #2
 8001e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4807      	ldr	r0, [pc, #28]	@ (8001e5c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e40:	f000 ff66 	bl	8002d10 <HAL_GPIO_Init>
}
 8001e44:	bf00      	nop
 8001e46:	3730      	adds	r7, #48	@ 0x30
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40000800 	.word	0x40000800
 8001e5c:	40020c00 	.word	0x40020c00

08001e60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <HAL_TIM_PWM_MspInit+0x38>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10b      	bne.n	8001e8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	4a09      	ldr	r2, [pc, #36]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7e:	4b07      	ldr	r3, [pc, #28]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40014000 	.word	0x40014000
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	@ 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a56      	ldr	r2, [pc, #344]	@ (8002018 <HAL_TIM_MspPostInit+0x178>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d11d      	bne.n	8001efe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec2:	4b56      	ldr	r3, [pc, #344]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a55      	ldr	r2, [pc, #340]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001ec8:	f043 0310 	orr.w	r3, r3, #16
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b53      	ldr	r3, [pc, #332]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001eda:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	484a      	ldr	r0, [pc, #296]	@ (8002020 <HAL_TIM_MspPostInit+0x180>)
 8001ef8:	f000 ff0a 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001efc:	e088      	b.n	8002010 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f06:	d11d      	bne.n	8001f44 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f08:	4b44      	ldr	r3, [pc, #272]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	4a43      	ldr	r2, [pc, #268]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f14:	4b41      	ldr	r3, [pc, #260]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f32:	2301      	movs	r3, #1
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4839      	ldr	r0, [pc, #228]	@ (8002024 <HAL_TIM_MspPostInit+0x184>)
 8001f3e:	f000 fee7 	bl	8002d10 <HAL_GPIO_Init>
}
 8001f42:	e065      	b.n	8002010 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a37      	ldr	r2, [pc, #220]	@ (8002028 <HAL_TIM_MspPostInit+0x188>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d11c      	bne.n	8001f88 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b33      	ldr	r3, [pc, #204]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a32      	ldr	r2, [pc, #200]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b30      	ldr	r3, [pc, #192]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f76:	2302      	movs	r3, #2
 8001f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4828      	ldr	r0, [pc, #160]	@ (8002024 <HAL_TIM_MspPostInit+0x184>)
 8001f82:	f000 fec5 	bl	8002d10 <HAL_GPIO_Init>
}
 8001f86:	e043      	b.n	8002010 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a27      	ldr	r2, [pc, #156]	@ (800202c <HAL_TIM_MspPostInit+0x18c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d11d      	bne.n	8001fce <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	4b22      	ldr	r3, [pc, #136]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a21      	ldr	r2, [pc, #132]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8001faa:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	481a      	ldr	r0, [pc, #104]	@ (8002030 <HAL_TIM_MspPostInit+0x190>)
 8001fc8:	f000 fea2 	bl	8002d10 <HAL_GPIO_Init>
}
 8001fcc:	e020      	b.n	8002010 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a18      	ldr	r2, [pc, #96]	@ (8002034 <HAL_TIM_MspPostInit+0x194>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd8:	4b10      	ldr	r3, [pc, #64]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HAL_TIM_MspPostInit+0x17c>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8001ff0:	2360      	movs	r3, #96	@ 0x60
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002000:	2303      	movs	r3, #3
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4805      	ldr	r0, [pc, #20]	@ (8002020 <HAL_TIM_MspPostInit+0x180>)
 800200c:	f000 fe80 	bl	8002d10 <HAL_GPIO_Init>
}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	@ 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40010000 	.word	0x40010000
 800201c:	40023800 	.word	0x40023800
 8002020:	40021000 	.word	0x40021000
 8002024:	40020000 	.word	0x40020000
 8002028:	40000c00 	.word	0x40000c00
 800202c:	40010400 	.word	0x40010400
 8002030:	40020800 	.word	0x40020800
 8002034:	40014000 	.word	0x40014000

08002038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b0b6      	sub	sp, #216	@ 0xd8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002050:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002054:	2290      	movs	r2, #144	@ 0x90
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f004 ffec 	bl	8007036 <memset>
  if(huart->Instance==UART4)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4aa0      	ldr	r2, [pc, #640]	@ (80022e4 <HAL_UART_MspInit+0x2ac>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d13e      	bne.n	80020e6 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800206c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002074:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002078:	4618      	mov	r0, r3
 800207a:	f001 fe91 	bl	8003da0 <HAL_RCCEx_PeriphCLKConfig>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002084:	f7ff fc34 	bl	80018f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002088:	4b97      	ldr	r3, [pc, #604]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	4a96      	ldr	r2, [pc, #600]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 800208e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002092:	6413      	str	r3, [r2, #64]	@ 0x40
 8002094:	4b94      	ldr	r3, [pc, #592]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
 800209e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a0:	4b91      	ldr	r3, [pc, #580]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a4:	4a90      	ldr	r2, [pc, #576]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ac:	4b8e      	ldr	r3, [pc, #568]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80020b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020d2:	2308      	movs	r3, #8
 80020d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80020dc:	4619      	mov	r1, r3
 80020de:	4883      	ldr	r0, [pc, #524]	@ (80022ec <HAL_UART_MspInit+0x2b4>)
 80020e0:	f000 fe16 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020e4:	e151      	b.n	800238a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a81      	ldr	r2, [pc, #516]	@ (80022f0 <HAL_UART_MspInit+0x2b8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d160      	bne.n	80021b2 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80020f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002100:	4618      	mov	r0, r3
 8002102:	f001 fe4d 	bl	8003da0 <HAL_RCCEx_PeriphCLKConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800210c:	f7ff fbf0 	bl	80018f0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002110:	4b75      	ldr	r3, [pc, #468]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	4a74      	ldr	r2, [pc, #464]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 8002116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800211a:	6413      	str	r3, [r2, #64]	@ 0x40
 800211c:	4b72      	ldr	r3, [pc, #456]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002128:	4b6f      	ldr	r3, [pc, #444]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	4a6e      	ldr	r2, [pc, #440]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	6313      	str	r3, [r2, #48]	@ 0x30
 8002134:	4b6c      	ldr	r3, [pc, #432]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002140:	4b69      	ldr	r3, [pc, #420]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	4a68      	ldr	r2, [pc, #416]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	6313      	str	r3, [r2, #48]	@ 0x30
 800214c:	4b66      	ldr	r3, [pc, #408]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	623b      	str	r3, [r7, #32]
 8002156:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002158:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800215c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002172:	2308      	movs	r3, #8
 8002174:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002178:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800217c:	4619      	mov	r1, r3
 800217e:	485d      	ldr	r0, [pc, #372]	@ (80022f4 <HAL_UART_MspInit+0x2bc>)
 8002180:	f000 fdc6 	bl	8002d10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002188:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800219e:	2308      	movs	r3, #8
 80021a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4850      	ldr	r0, [pc, #320]	@ (80022ec <HAL_UART_MspInit+0x2b4>)
 80021ac:	f000 fdb0 	bl	8002d10 <HAL_GPIO_Init>
}
 80021b0:	e0eb      	b.n	800238a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a50      	ldr	r2, [pc, #320]	@ (80022f8 <HAL_UART_MspInit+0x2c0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d151      	bne.n	8002260 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021bc:	2340      	movs	r3, #64	@ 0x40
 80021be:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021c0:	2300      	movs	r3, #0
 80021c2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 fde9 	bl	8003da0 <HAL_RCCEx_PeriphCLKConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80021d4:	f7ff fb8c 	bl	80018f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d8:	4b43      	ldr	r3, [pc, #268]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80021da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021dc:	4a42      	ldr	r2, [pc, #264]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80021de:	f043 0310 	orr.w	r3, r3, #16
 80021e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e4:	4b40      	ldr	r3, [pc, #256]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80021e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f0:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f4:	4a3c      	ldr	r2, [pc, #240]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fc:	4b3a      	ldr	r3, [pc, #232]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800220c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002222:	2304      	movs	r3, #4
 8002224:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800222c:	4619      	mov	r1, r3
 800222e:	4831      	ldr	r0, [pc, #196]	@ (80022f4 <HAL_UART_MspInit+0x2bc>)
 8002230:	f000 fd6e 	bl	8002d10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002234:	2340      	movs	r3, #64	@ 0x40
 8002236:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800224c:	2307      	movs	r3, #7
 800224e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002252:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002256:	4619      	mov	r1, r3
 8002258:	4826      	ldr	r0, [pc, #152]	@ (80022f4 <HAL_UART_MspInit+0x2bc>)
 800225a:	f000 fd59 	bl	8002d10 <HAL_GPIO_Init>
}
 800225e:	e094      	b.n	800238a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a25      	ldr	r2, [pc, #148]	@ (80022fc <HAL_UART_MspInit+0x2c4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d14c      	bne.n	8002304 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800226e:	2300      	movs	r3, #0
 8002270:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002272:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002276:	4618      	mov	r0, r3
 8002278:	f001 fd92 	bl	8003da0 <HAL_RCCEx_PeriphCLKConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002282:	f7ff fb35 	bl	80018f0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002286:	4b18      	ldr	r3, [pc, #96]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	4a17      	ldr	r2, [pc, #92]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 800228c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002290:	6413      	str	r3, [r2, #64]	@ 0x40
 8002292:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800229e:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a11      	ldr	r2, [pc, #68]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <HAL_UART_MspInit+0x2b0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022b6:	2360      	movs	r3, #96	@ 0x60
 80022b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c8:	2303      	movs	r3, #3
 80022ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ce:	2307      	movs	r3, #7
 80022d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80022d8:	4619      	mov	r1, r3
 80022da:	4809      	ldr	r0, [pc, #36]	@ (8002300 <HAL_UART_MspInit+0x2c8>)
 80022dc:	f000 fd18 	bl	8002d10 <HAL_GPIO_Init>
}
 80022e0:	e053      	b.n	800238a <HAL_UART_MspInit+0x352>
 80022e2:	bf00      	nop
 80022e4:	40004c00 	.word	0x40004c00
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020800 	.word	0x40020800
 80022f0:	40005000 	.word	0x40005000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40011000 	.word	0x40011000
 80022fc:	40004400 	.word	0x40004400
 8002300:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a22      	ldr	r2, [pc, #136]	@ (8002394 <HAL_UART_MspInit+0x35c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d13d      	bne.n	800238a <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800230e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002312:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800231e:	4618      	mov	r0, r3
 8002320:	f001 fd3e 	bl	8003da0 <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 800232a:	f7ff fae1 	bl	80018f0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800232e:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <HAL_UART_MspInit+0x360>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	4a19      	ldr	r2, [pc, #100]	@ (8002398 <HAL_UART_MspInit+0x360>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002338:	6413      	str	r3, [r2, #64]	@ 0x40
 800233a:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <HAL_UART_MspInit+0x360>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002346:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <HAL_UART_MspInit+0x360>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a13      	ldr	r2, [pc, #76]	@ (8002398 <HAL_UART_MspInit+0x360>)
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_UART_MspInit+0x360>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800235e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002362:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002378:	2307      	movs	r3, #7
 800237a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	@ (800239c <HAL_UART_MspInit+0x364>)
 8002386:	f000 fcc3 	bl	8002d10 <HAL_GPIO_Init>
}
 800238a:	bf00      	nop
 800238c:	37d8      	adds	r7, #216	@ 0xd8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40004800 	.word	0x40004800
 8002398:	40023800 	.word	0x40023800
 800239c:	40020c00 	.word	0x40020c00

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <NMI_Handler+0x4>

080023a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  static uint32_t kLed = 0;
	  if(++kLed >= 100000)
 80023ac:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <HardFault_Handler+0x2c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a08      	ldr	r2, [pc, #32]	@ (80023d4 <HardFault_Handler+0x2c>)
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b07      	ldr	r3, [pc, #28]	@ (80023d4 <HardFault_Handler+0x2c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a07      	ldr	r2, [pc, #28]	@ (80023d8 <HardFault_Handler+0x30>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d9f5      	bls.n	80023ac <HardFault_Handler+0x4>
	  {
		  kLed = 0;
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <HardFault_Handler+0x2c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80023c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023ca:	4804      	ldr	r0, [pc, #16]	@ (80023dc <HardFault_Handler+0x34>)
 80023cc:	f000 fe65 	bl	800309a <HAL_GPIO_TogglePin>
  {
 80023d0:	e7ec      	b.n	80023ac <HardFault_Handler+0x4>
 80023d2:	bf00      	nop
 80023d4:	20000770 	.word	0x20000770
 80023d8:	0001869f 	.word	0x0001869f
 80023dc:	40020400 	.word	0x40020400

080023e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <MemManage_Handler+0x4>

080023e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <BusFault_Handler+0x4>

080023f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <UsageFault_Handler+0x4>

080023f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002426:	f000 f889 	bl	800253c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002434:	4802      	ldr	r0, [pc, #8]	@ (8002440 <TIM6_DAC_IRQHandler+0x10>)
 8002436:	f002 fd9d 	bl	8004f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200002f8 	.word	0x200002f8

08002444 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <SystemInit+0x28>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244e:	4a07      	ldr	r2, [pc, #28]	@ (800246c <SystemInit+0x28>)
 8002450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SystemInit+0x28>)
 800245a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800245e:	609a      	str	r2, [r3, #8]
#endif
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002474:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002476:	e003      	b.n	8002480 <LoopCopyDataInit>

08002478 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800247a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800247c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800247e:	3104      	adds	r1, #4

08002480 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002480:	480b      	ldr	r0, [pc, #44]	@ (80024b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002482:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002484:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002486:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002488:	d3f6      	bcc.n	8002478 <CopyDataInit>
  ldr  r2, =_sbss
 800248a:	4a0b      	ldr	r2, [pc, #44]	@ (80024b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800248c:	e002      	b.n	8002494 <LoopFillZerobss>

0800248e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800248e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002490:	f842 3b04 	str.w	r3, [r2], #4

08002494 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002494:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002496:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002498:	d3f9      	bcc.n	800248e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800249a:	f7ff ffd3 	bl	8002444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249e:	f004 fdd3 	bl	8007048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a2:	f7fe fa0f 	bl	80008c4 <main>
  bx  lr    
 80024a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024a8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80024ac:	080070ec 	.word	0x080070ec
  ldr  r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024b4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80024b8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80024bc:	20000778 	.word	0x20000778

080024c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC_IRQHandler>

080024c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c6:	2003      	movs	r0, #3
 80024c8:	f000 fbe0 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f000 f805 	bl	80024dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d2:	f7ff fa29 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e4:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <HAL_InitTick+0x54>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_InitTick+0x58>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fbfb 	bl	8002cf6 <HAL_SYSTICK_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e00e      	b.n	8002528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b0f      	cmp	r3, #15
 800250e:	d80a      	bhi.n	8002526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002510:	2200      	movs	r2, #0
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f000 fbc3 	bl	8002ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800251c:	4a06      	ldr	r2, [pc, #24]	@ (8002538 <HAL_InitTick+0x5c>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000000 	.word	0x20000000
 8002534:	20000008 	.word	0x20000008
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_IncTick+0x20>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_IncTick+0x24>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4413      	add	r3, r2
 800254c:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <HAL_IncTick+0x24>)
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000008 	.word	0x20000008
 8002560:	20000774 	.word	0x20000774

08002564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <HAL_GetTick+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000774 	.word	0x20000774

0800257c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff ffee 	bl	8002564 <HAL_GetTick>
 8002588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d005      	beq.n	80025a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_Delay+0x44>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025a2:	bf00      	nop
 80025a4:	f7ff ffde 	bl	8002564 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8f7      	bhi.n	80025a4 <HAL_Delay+0x28>
  {
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000008 	.word	0x20000008

080025c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e031      	b.n	800263e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff f9c4 	bl	8001970 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <HAL_ADC_Init+0x84>)
 8002608:	4013      	ands	r3, r2
 800260a:	f043 0202 	orr.w	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f970 	bl	80028f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f023 0303 	bic.w	r3, r3, #3
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40
 800262e:	e001      	b.n	8002634 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	ffffeefd 	.word	0xffffeefd

0800264c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1c>
 8002664:	2302      	movs	r3, #2
 8002666:	e136      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x28a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b09      	cmp	r3, #9
 8002676:	d93a      	bls.n	80026ee <HAL_ADC_ConfigChannel+0xa2>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002680:	d035      	beq.n	80026ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68d9      	ldr	r1, [r3, #12]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	3b1e      	subs	r3, #30
 8002698:	2207      	movs	r2, #7
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	400a      	ands	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a8d      	ldr	r2, [pc, #564]	@ (80028e4 <HAL_ADC_ConfigChannel+0x298>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10a      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68d9      	ldr	r1, [r3, #12]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	061a      	lsls	r2, r3, #24
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c6:	e035      	b.n	8002734 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68d9      	ldr	r1, [r3, #12]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4403      	add	r3, r0
 80026e0:	3b1e      	subs	r3, #30
 80026e2:	409a      	lsls	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ec:	e022      	b.n	8002734 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6919      	ldr	r1, [r3, #16]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	2207      	movs	r2, #7
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43da      	mvns	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	400a      	ands	r2, r1
 8002710:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6919      	ldr	r1, [r3, #16]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	4603      	mov	r3, r0
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4403      	add	r3, r0
 800272a:	409a      	lsls	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d824      	bhi.n	8002786 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	3b05      	subs	r3, #5
 800274e:	221f      	movs	r2, #31
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43da      	mvns	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	400a      	ands	r2, r1
 800275c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	4618      	mov	r0, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3b05      	subs	r3, #5
 8002778:	fa00 f203 	lsl.w	r2, r0, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	635a      	str	r2, [r3, #52]	@ 0x34
 8002784:	e04c      	b.n	8002820 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b0c      	cmp	r3, #12
 800278c:	d824      	bhi.n	80027d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	3b23      	subs	r3, #35	@ 0x23
 80027a0:	221f      	movs	r2, #31
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	400a      	ands	r2, r1
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	3b23      	subs	r3, #35	@ 0x23
 80027ca:	fa00 f203 	lsl.w	r2, r0, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80027d6:	e023      	b.n	8002820 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	3b41      	subs	r3, #65	@ 0x41
 80027ea:	221f      	movs	r2, #31
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43da      	mvns	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	400a      	ands	r2, r1
 80027f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	3b41      	subs	r3, #65	@ 0x41
 8002814:	fa00 f203 	lsl.w	r2, r0, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a30      	ldr	r2, [pc, #192]	@ (80028e8 <HAL_ADC_ConfigChannel+0x29c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10a      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1f4>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002832:	d105      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002834:	4b2d      	ldr	r3, [pc, #180]	@ (80028ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a2c      	ldr	r2, [pc, #176]	@ (80028ec <HAL_ADC_ConfigChannel+0x2a0>)
 800283a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800283e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a28      	ldr	r2, [pc, #160]	@ (80028e8 <HAL_ADC_ConfigChannel+0x29c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10f      	bne.n	800286a <HAL_ADC_ConfigChannel+0x21e>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b12      	cmp	r3, #18
 8002850:	d10b      	bne.n	800286a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002852:	4b26      	ldr	r3, [pc, #152]	@ (80028ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a25      	ldr	r2, [pc, #148]	@ (80028ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002858:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800285c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800285e:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a22      	ldr	r2, [pc, #136]	@ (80028ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002864:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002868:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1e      	ldr	r2, [pc, #120]	@ (80028e8 <HAL_ADC_ConfigChannel+0x29c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d12b      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x280>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1a      	ldr	r2, [pc, #104]	@ (80028e4 <HAL_ADC_ConfigChannel+0x298>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d003      	beq.n	8002886 <HAL_ADC_ConfigChannel+0x23a>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b11      	cmp	r3, #17
 8002884:	d122      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002886:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a18      	ldr	r2, [pc, #96]	@ (80028ec <HAL_ADC_ConfigChannel+0x2a0>)
 800288c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002890:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002892:	4b16      	ldr	r3, [pc, #88]	@ (80028ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a15      	ldr	r2, [pc, #84]	@ (80028ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002898:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800289c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a10      	ldr	r2, [pc, #64]	@ (80028e4 <HAL_ADC_ConfigChannel+0x298>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d111      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028a8:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <HAL_ADC_ConfigChannel+0x2a4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a11      	ldr	r2, [pc, #68]	@ (80028f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9a      	lsrs	r2, r3, #18
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028be:	e002      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f9      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	10000012 	.word	0x10000012
 80028e8:	40012000 	.word	0x40012000
 80028ec:	40012300 	.word	0x40012300
 80028f0:	20000000 	.word	0x20000000
 80028f4:	431bde83 	.word	0x431bde83

080028f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002900:	4b78      	ldr	r3, [pc, #480]	@ (8002ae4 <ADC_Init+0x1ec>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a77      	ldr	r2, [pc, #476]	@ (8002ae4 <ADC_Init+0x1ec>)
 8002906:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800290a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800290c:	4b75      	ldr	r3, [pc, #468]	@ (8002ae4 <ADC_Init+0x1ec>)
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4973      	ldr	r1, [pc, #460]	@ (8002ae4 <ADC_Init+0x1ec>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800294c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800296e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002986:	4a58      	ldr	r2, [pc, #352]	@ (8002ae8 <ADC_Init+0x1f0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800299a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6899      	ldr	r1, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e00f      	b.n	80029f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0202 	bic.w	r2, r2, #2
 8002a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	005a      	lsls	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	035a      	lsls	r2, r3, #13
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e007      	b.n	8002a68 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	051a      	lsls	r2, r3, #20
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aaa:	025a      	lsls	r2, r3, #9
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	029a      	lsls	r2, r3, #10
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	0f000001 	.word	0x0f000001

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x40>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x40>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00
 8002b30:	05fa0000 	.word	0x05fa0000

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db0b      	blt.n	8002b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4907      	ldr	r1, [pc, #28]	@ (8002b88 <__NVIC_EnableIRQ+0x38>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0a      	blt.n	8002bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	490c      	ldr	r1, [pc, #48]	@ (8002bd8 <__NVIC_SetPriority+0x4c>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	0112      	lsls	r2, r2, #4
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4908      	ldr	r1, [pc, #32]	@ (8002bdc <__NVIC_SetPriority+0x50>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	440b      	add	r3, r1
 8002bca:	761a      	strb	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	@ 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f1c3 0307 	rsb	r3, r3, #7
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf28      	it	cs
 8002bfe:	2304      	movcs	r3, #4
 8002c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d902      	bls.n	8002c10 <NVIC_EncodePriority+0x30>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3b03      	subs	r3, #3
 8002c0e:	e000      	b.n	8002c12 <NVIC_EncodePriority+0x32>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43d9      	mvns	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	4313      	orrs	r3, r2
         );
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	210f      	movs	r1, #15
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f7ff ff8e 	bl	8002b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff29 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb4:	f7ff ff3e 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ff8e 	bl	8002be0 <NVIC_EncodePriority>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff5d 	bl	8002b8c <__NVIC_SetPriority>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff31 	bl	8002b50 <__NVIC_EnableIRQ>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ffa2 	bl	8002c48 <SysTick_Config>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	@ 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e175      	b.n	800301c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f040 8164 	bne.w	8003016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d005      	beq.n	8002d66 <HAL_GPIO_Init+0x56>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d130      	bne.n	8002dc8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 0201 	and.w	r2, r3, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d017      	beq.n	8002e04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d123      	bne.n	8002e58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	08da      	lsrs	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3208      	adds	r2, #8
 8002e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	08da      	lsrs	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3208      	adds	r2, #8
 8002e52:	69b9      	ldr	r1, [r7, #24]
 8002e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0203 	and.w	r2, r3, #3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80be 	beq.w	8003016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9a:	4b66      	ldr	r3, [pc, #408]	@ (8003034 <HAL_GPIO_Init+0x324>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	4a65      	ldr	r2, [pc, #404]	@ (8003034 <HAL_GPIO_Init+0x324>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea6:	4b63      	ldr	r3, [pc, #396]	@ (8003034 <HAL_GPIO_Init+0x324>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eb2:	4a61      	ldr	r2, [pc, #388]	@ (8003038 <HAL_GPIO_Init+0x328>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	@ (800303c <HAL_GPIO_Init+0x32c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d037      	beq.n	8002f4e <HAL_GPIO_Init+0x23e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a57      	ldr	r2, [pc, #348]	@ (8003040 <HAL_GPIO_Init+0x330>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d031      	beq.n	8002f4a <HAL_GPIO_Init+0x23a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a56      	ldr	r2, [pc, #344]	@ (8003044 <HAL_GPIO_Init+0x334>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02b      	beq.n	8002f46 <HAL_GPIO_Init+0x236>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a55      	ldr	r2, [pc, #340]	@ (8003048 <HAL_GPIO_Init+0x338>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d025      	beq.n	8002f42 <HAL_GPIO_Init+0x232>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a54      	ldr	r2, [pc, #336]	@ (800304c <HAL_GPIO_Init+0x33c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <HAL_GPIO_Init+0x22e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a53      	ldr	r2, [pc, #332]	@ (8003050 <HAL_GPIO_Init+0x340>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <HAL_GPIO_Init+0x22a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a52      	ldr	r2, [pc, #328]	@ (8003054 <HAL_GPIO_Init+0x344>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x226>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a51      	ldr	r2, [pc, #324]	@ (8003058 <HAL_GPIO_Init+0x348>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x222>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a50      	ldr	r2, [pc, #320]	@ (800305c <HAL_GPIO_Init+0x34c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x21e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4f      	ldr	r2, [pc, #316]	@ (8003060 <HAL_GPIO_Init+0x350>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x21a>
 8002f26:	2309      	movs	r3, #9
 8002f28:	e012      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	e010      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e00e      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e00c      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f36:	2306      	movs	r3, #6
 8002f38:	e00a      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e008      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e004      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f002 0203 	and.w	r2, r2, #3
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	4093      	lsls	r3, r2
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f60:	4935      	ldr	r1, [pc, #212]	@ (8003038 <HAL_GPIO_Init+0x328>)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	3302      	adds	r3, #2
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f92:	4a34      	ldr	r2, [pc, #208]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f98:	4b32      	ldr	r3, [pc, #200]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fbc:	4a29      	ldr	r2, [pc, #164]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fc2:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003010:	4a14      	ldr	r2, [pc, #80]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3301      	adds	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b0f      	cmp	r3, #15
 8003020:	f67f ae86 	bls.w	8002d30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3724      	adds	r7, #36	@ 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
 8003038:	40013800 	.word	0x40013800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	40020800 	.word	0x40020800
 8003048:	40020c00 	.word	0x40020c00
 800304c:	40021000 	.word	0x40021000
 8003050:	40021400 	.word	0x40021400
 8003054:	40021800 	.word	0x40021800
 8003058:	40021c00 	.word	0x40021c00
 800305c:	40022000 	.word	0x40022000
 8003060:	40022400 	.word	0x40022400
 8003064:	40013c00 	.word	0x40013c00

08003068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
 8003074:	4613      	mov	r3, r2
 8003076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003078:	787b      	ldrb	r3, [r7, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003084:	e003      	b.n	800308e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	041a      	lsls	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ac:	887a      	ldrh	r2, [r7, #2]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	041a      	lsls	r2, r3, #16
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	400b      	ands	r3, r1
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e08b      	b.n	80031fa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe fc7a 	bl	80019f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	@ 0x24
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003120:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003130:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d107      	bne.n	800314a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e006      	b.n	8003158 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003156:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d108      	bne.n	8003172 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	e007      	b.n	8003182 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003180:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b1d      	ldr	r3, [pc, #116]	@ (8003204 <HAL_I2C_Init+0x134>)
 800318e:	430b      	orrs	r3, r1
 8003190:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69d9      	ldr	r1, [r3, #28]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	02008000 	.word	0x02008000

08003208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b20      	cmp	r3, #32
 800321c:	d138      	bne.n	8003290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003228:	2302      	movs	r3, #2
 800322a:	e032      	b.n	8003292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	@ 0x24
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800325a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d139      	bne.n	8003328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032be:	2302      	movs	r3, #2
 80032c0:	e033      	b.n	800332a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2224      	movs	r2, #36	@ 0x24
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e000      	b.n	800332a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003328:	2302      	movs	r3, #2
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a04      	ldr	r2, [pc, #16]	@ (8003354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003346:	6013      	str	r3, [r2, #0]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40007000 	.word	0x40007000

08003358 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	4b23      	ldr	r3, [pc, #140]	@ (80033f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	4a22      	ldr	r2, [pc, #136]	@ (80033f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336c:	6413      	str	r3, [r2, #64]	@ 0x40
 800336e:	4b20      	ldr	r3, [pc, #128]	@ (80033f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800337a:	4b1e      	ldr	r3, [pc, #120]	@ (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003384:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003386:	f7ff f8ed 	bl	8002564 <HAL_GetTick>
 800338a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800338c:	e009      	b.n	80033a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800338e:	f7ff f8e9 	bl	8002564 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800339c:	d901      	bls.n	80033a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e022      	b.n	80033e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033a2:	4b14      	ldr	r3, [pc, #80]	@ (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ae:	d1ee      	bne.n	800338e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033b0:	4b10      	ldr	r3, [pc, #64]	@ (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0f      	ldr	r2, [pc, #60]	@ (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033bc:	f7ff f8d2 	bl	8002564 <HAL_GetTick>
 80033c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033c2:	e009      	b.n	80033d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c4:	f7ff f8ce 	bl	8002564 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033d2:	d901      	bls.n	80033d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e007      	b.n	80033e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033e4:	d1ee      	bne.n	80033c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40007000 	.word	0x40007000

080033f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e29b      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8087 	beq.w	800352a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800341c:	4b96      	ldr	r3, [pc, #600]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b04      	cmp	r3, #4
 8003426:	d00c      	beq.n	8003442 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003428:	4b93      	ldr	r3, [pc, #588]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d112      	bne.n	800345a <HAL_RCC_OscConfig+0x62>
 8003434:	4b90      	ldr	r3, [pc, #576]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800343c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003440:	d10b      	bne.n	800345a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003442:	4b8d      	ldr	r3, [pc, #564]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d06c      	beq.n	8003528 <HAL_RCC_OscConfig+0x130>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d168      	bne.n	8003528 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e275      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003462:	d106      	bne.n	8003472 <HAL_RCC_OscConfig+0x7a>
 8003464:	4b84      	ldr	r3, [pc, #528]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a83      	ldr	r2, [pc, #524]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 800346a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	e02e      	b.n	80034d0 <HAL_RCC_OscConfig+0xd8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x9c>
 800347a:	4b7f      	ldr	r3, [pc, #508]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a7e      	ldr	r2, [pc, #504]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b7c      	ldr	r3, [pc, #496]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7b      	ldr	r2, [pc, #492]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 800348c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e01d      	b.n	80034d0 <HAL_RCC_OscConfig+0xd8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0xc0>
 800349e:	4b76      	ldr	r3, [pc, #472]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a75      	ldr	r2, [pc, #468]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80034a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	4b73      	ldr	r3, [pc, #460]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a72      	ldr	r2, [pc, #456]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0xd8>
 80034b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80034be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80034ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d013      	beq.n	8003500 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7ff f844 	bl	8002564 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e0:	f7ff f840 	bl	8002564 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	@ 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e229      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	4b61      	ldr	r3, [pc, #388]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0xe8>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7ff f830 	bl	8002564 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7ff f82c 	bl	8002564 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	@ 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e215      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	4b57      	ldr	r3, [pc, #348]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x110>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d069      	beq.n	800360a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003536:	4b50      	ldr	r3, [pc, #320]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003542:	4b4d      	ldr	r3, [pc, #308]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b08      	cmp	r3, #8
 800354c:	d11c      	bne.n	8003588 <HAL_RCC_OscConfig+0x190>
 800354e:	4b4a      	ldr	r3, [pc, #296]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d116      	bne.n	8003588 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	4b47      	ldr	r3, [pc, #284]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_RCC_OscConfig+0x17a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d001      	beq.n	8003572 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e1e9      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b41      	ldr	r3, [pc, #260]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	493d      	ldr	r1, [pc, #244]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003586:	e040      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d023      	beq.n	80035d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003590:	4b39      	ldr	r3, [pc, #228]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a38      	ldr	r2, [pc, #224]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe ffe2 	bl	8002564 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fe ffde 	bl	8002564 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e1c7      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	4b30      	ldr	r3, [pc, #192]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4929      	ldr	r1, [pc, #164]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
 80035d6:	e018      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d8:	4b27      	ldr	r3, [pc, #156]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a26      	ldr	r2, [pc, #152]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe ffbe 	bl	8002564 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ec:	f7fe ffba 	bl	8002564 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e1a3      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d038      	beq.n	8003688 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d019      	beq.n	8003652 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003622:	4a15      	ldr	r2, [pc, #84]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362a:	f7fe ff9b 	bl	8002564 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003632:	f7fe ff97 	bl	8002564 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e180      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x23a>
 8003650:	e01a      	b.n	8003688 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003656:	4a08      	ldr	r2, [pc, #32]	@ (8003678 <HAL_RCC_OscConfig+0x280>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7fe ff81 	bl	8002564 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003664:	e00a      	b.n	800367c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003666:	f7fe ff7d 	bl	8002564 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d903      	bls.n	800367c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e166      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
 8003678:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	4b92      	ldr	r3, [pc, #584]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 800367e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ee      	bne.n	8003666 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a4 	beq.w	80037de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003696:	4b8c      	ldr	r3, [pc, #560]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10d      	bne.n	80036be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	4b89      	ldr	r3, [pc, #548]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	4a88      	ldr	r2, [pc, #544]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ae:	4b86      	ldr	r3, [pc, #536]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036be:	4b83      	ldr	r3, [pc, #524]	@ (80038cc <HAL_RCC_OscConfig+0x4d4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d118      	bne.n	80036fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036ca:	4b80      	ldr	r3, [pc, #512]	@ (80038cc <HAL_RCC_OscConfig+0x4d4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7f      	ldr	r2, [pc, #508]	@ (80038cc <HAL_RCC_OscConfig+0x4d4>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fe ff45 	bl	8002564 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036de:	f7fe ff41 	bl	8002564 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b64      	cmp	r3, #100	@ 0x64
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e12a      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f0:	4b76      	ldr	r3, [pc, #472]	@ (80038cc <HAL_RCC_OscConfig+0x4d4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x31a>
 8003704:	4b70      	ldr	r3, [pc, #448]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003708:	4a6f      	ldr	r2, [pc, #444]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003710:	e02d      	b.n	800376e <HAL_RCC_OscConfig+0x376>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x33c>
 800371a:	4b6b      	ldr	r3, [pc, #428]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	4a6a      	ldr	r2, [pc, #424]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	6713      	str	r3, [r2, #112]	@ 0x70
 8003726:	4b68      	ldr	r3, [pc, #416]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372a:	4a67      	ldr	r2, [pc, #412]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6713      	str	r3, [r2, #112]	@ 0x70
 8003732:	e01c      	b.n	800376e <HAL_RCC_OscConfig+0x376>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d10c      	bne.n	8003756 <HAL_RCC_OscConfig+0x35e>
 800373c:	4b62      	ldr	r3, [pc, #392]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003740:	4a61      	ldr	r2, [pc, #388]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	6713      	str	r3, [r2, #112]	@ 0x70
 8003748:	4b5f      	ldr	r3, [pc, #380]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374c:	4a5e      	ldr	r2, [pc, #376]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6713      	str	r3, [r2, #112]	@ 0x70
 8003754:	e00b      	b.n	800376e <HAL_RCC_OscConfig+0x376>
 8003756:	4b5c      	ldr	r3, [pc, #368]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	4a5b      	ldr	r2, [pc, #364]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6713      	str	r3, [r2, #112]	@ 0x70
 8003762:	4b59      	ldr	r3, [pc, #356]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003766:	4a58      	ldr	r2, [pc, #352]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d015      	beq.n	80037a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fe fef5 	bl	8002564 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe fef1 	bl	8002564 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0d8      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	4b4c      	ldr	r3, [pc, #304]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ee      	beq.n	800377e <HAL_RCC_OscConfig+0x386>
 80037a0:	e014      	b.n	80037cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fe fedf 	bl	8002564 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fe fedb 	bl	8002564 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0c2      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c0:	4b41      	ldr	r3, [pc, #260]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ee      	bne.n	80037aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d105      	bne.n	80037de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d2:	4b3d      	ldr	r3, [pc, #244]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	4a3c      	ldr	r2, [pc, #240]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80ae 	beq.w	8003944 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e8:	4b37      	ldr	r3, [pc, #220]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d06d      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d14b      	bne.n	8003894 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fc:	4b32      	ldr	r3, [pc, #200]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a31      	ldr	r2, [pc, #196]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe feac 	bl	8002564 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fe fea8 	bl	8002564 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e091      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	4b29      	ldr	r3, [pc, #164]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	019b      	lsls	r3, r3, #6
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	071b      	lsls	r3, r3, #28
 800385a:	491b      	ldr	r1, [pc, #108]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003860:	4b19      	ldr	r3, [pc, #100]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a18      	ldr	r2, [pc, #96]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003866:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800386a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fe fe7a 	bl	8002564 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003874:	f7fe fe76 	bl	8002564 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e05f      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003886:	4b10      	ldr	r3, [pc, #64]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x47c>
 8003892:	e057      	b.n	8003944 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003894:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0b      	ldr	r2, [pc, #44]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 800389a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800389e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fe60 	bl	8002564 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe fe5c 	bl	8002564 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e045      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	4b03      	ldr	r3, [pc, #12]	@ (80038c8 <HAL_RCC_OscConfig+0x4d0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4b0>
 80038c6:	e03d      	b.n	8003944 <HAL_RCC_OscConfig+0x54c>
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003950 <HAL_RCC_OscConfig+0x558>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d030      	beq.n	8003940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d129      	bne.n	8003940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d122      	bne.n	8003940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003906:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003908:	4293      	cmp	r3, r2
 800390a:	d119      	bne.n	8003940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	3b01      	subs	r3, #1
 800391a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d10f      	bne.n	8003940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d107      	bne.n	8003940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800

08003954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0d0      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800396c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d910      	bls.n	800399c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b67      	ldr	r3, [pc, #412]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 020f 	bic.w	r2, r3, #15
 8003982:	4965      	ldr	r1, [pc, #404]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b63      	ldr	r3, [pc, #396]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0b8      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d020      	beq.n	80039ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b4:	4b59      	ldr	r3, [pc, #356]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a58      	ldr	r2, [pc, #352]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 80039ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039cc:	4b53      	ldr	r3, [pc, #332]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a52      	ldr	r2, [pc, #328]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 80039d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d8:	4b50      	ldr	r3, [pc, #320]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	494d      	ldr	r1, [pc, #308]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d040      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	4b47      	ldr	r3, [pc, #284]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d115      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e07f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	4b41      	ldr	r3, [pc, #260]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e073      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a26:	4b3d      	ldr	r3, [pc, #244]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e06b      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a36:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f023 0203 	bic.w	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4936      	ldr	r1, [pc, #216]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a48:	f7fe fd8c 	bl	8002564 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a50:	f7fe fd88 	bl	8002564 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e053      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	4b2d      	ldr	r3, [pc, #180]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 020c 	and.w	r2, r3, #12
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1eb      	bne.n	8003a50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a78:	4b27      	ldr	r3, [pc, #156]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d210      	bcs.n	8003aa8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b24      	ldr	r3, [pc, #144]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 020f 	bic.w	r2, r3, #15
 8003a8e:	4922      	ldr	r1, [pc, #136]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e032      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab4:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4916      	ldr	r1, [pc, #88]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ad2:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	490e      	ldr	r1, [pc, #56]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ae6:	f000 f821 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003aea:	4602      	mov	r2, r0
 8003aec:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	490a      	ldr	r1, [pc, #40]	@ (8003b20 <HAL_RCC_ClockConfig+0x1cc>)
 8003af8:	5ccb      	ldrb	r3, [r1, r3]
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	4a09      	ldr	r2, [pc, #36]	@ (8003b24 <HAL_RCC_ClockConfig+0x1d0>)
 8003b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b02:	4b09      	ldr	r3, [pc, #36]	@ (8003b28 <HAL_RCC_ClockConfig+0x1d4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fce8 	bl	80024dc <HAL_InitTick>

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023c00 	.word	0x40023c00
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	080070c4 	.word	0x080070c4
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b30:	b094      	sub	sp, #80	@ 0x50
 8003b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b38:	2300      	movs	r3, #0
 8003b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b44:	4b79      	ldr	r3, [pc, #484]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d00d      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x40>
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	f200 80e1 	bhi.w	8003d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x34>
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b5e:	e0db      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b60:	4b73      	ldr	r3, [pc, #460]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b64:	e0db      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b66:	4b73      	ldr	r3, [pc, #460]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b6a:	e0d8      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b76:	4b6d      	ldr	r3, [pc, #436]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d063      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b82:	4b6a      	ldr	r3, [pc, #424]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	2200      	movs	r2, #0
 8003b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b96:	2300      	movs	r3, #0
 8003b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	462b      	mov	r3, r5
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	0159      	lsls	r1, r3, #5
 8003bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb0:	0150      	lsls	r0, r2, #5
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	1a51      	subs	r1, r2, r1
 8003bba:	6139      	str	r1, [r7, #16]
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bd0:	4659      	mov	r1, fp
 8003bd2:	018b      	lsls	r3, r1, #6
 8003bd4:	4651      	mov	r1, sl
 8003bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bda:	4651      	mov	r1, sl
 8003bdc:	018a      	lsls	r2, r1, #6
 8003bde:	4651      	mov	r1, sl
 8003be0:	ebb2 0801 	subs.w	r8, r2, r1
 8003be4:	4659      	mov	r1, fp
 8003be6:	eb63 0901 	sbc.w	r9, r3, r1
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfe:	4690      	mov	r8, r2
 8003c00:	4699      	mov	r9, r3
 8003c02:	4623      	mov	r3, r4
 8003c04:	eb18 0303 	adds.w	r3, r8, r3
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	eb49 0303 	adc.w	r3, r9, r3
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c1e:	4629      	mov	r1, r5
 8003c20:	024b      	lsls	r3, r1, #9
 8003c22:	4621      	mov	r1, r4
 8003c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c28:	4621      	mov	r1, r4
 8003c2a:	024a      	lsls	r2, r1, #9
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c32:	2200      	movs	r2, #0
 8003c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c3c:	f7fc fafc 	bl	8000238 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4613      	mov	r3, r2
 8003c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c48:	e058      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4a:	4b38      	ldr	r3, [pc, #224]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	2200      	movs	r2, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	4611      	mov	r1, r2
 8003c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c64:	4642      	mov	r2, r8
 8003c66:	464b      	mov	r3, r9
 8003c68:	f04f 0000 	mov.w	r0, #0
 8003c6c:	f04f 0100 	mov.w	r1, #0
 8003c70:	0159      	lsls	r1, r3, #5
 8003c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c76:	0150      	lsls	r0, r2, #5
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c82:	4649      	mov	r1, r9
 8003c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8003ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	00eb      	lsls	r3, r5, #3
 8003cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb2:	00e2      	lsls	r2, r4, #3
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	461d      	mov	r5, r3
 8003cb8:	4643      	mov	r3, r8
 8003cba:	18e3      	adds	r3, r4, r3
 8003cbc:	603b      	str	r3, [r7, #0]
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	eb45 0303 	adc.w	r3, r5, r3
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	028b      	lsls	r3, r1, #10
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cdc:	4621      	mov	r1, r4
 8003cde:	028a      	lsls	r2, r1, #10
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	61fa      	str	r2, [r7, #28]
 8003cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf0:	f7fc faa2 	bl	8000238 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	3301      	adds	r3, #1
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d16:	e002      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3750      	adds	r7, #80	@ 0x50
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	00f42400 	.word	0x00f42400
 8003d34:	007a1200 	.word	0x007a1200

08003d38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d3c:	4b03      	ldr	r3, [pc, #12]	@ (8003d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000000 	.word	0x20000000

08003d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d54:	f7ff fff0 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	0a9b      	lsrs	r3, r3, #10
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	4903      	ldr	r1, [pc, #12]	@ (8003d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d66:	5ccb      	ldrb	r3, [r1, r3]
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40023800 	.word	0x40023800
 8003d74:	080070d4 	.word	0x080070d4

08003d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d7c:	f7ff ffdc 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b05      	ldr	r3, [pc, #20]	@ (8003d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0b5b      	lsrs	r3, r3, #13
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4903      	ldr	r1, [pc, #12]	@ (8003d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	080070d4 	.word	0x080070d4

08003da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d012      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dc8:	4b69      	ldr	r3, [pc, #420]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	4a68      	ldr	r2, [pc, #416]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003dd2:	6093      	str	r3, [r2, #8]
 8003dd4:	4b66      	ldr	r3, [pc, #408]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ddc:	4964      	ldr	r1, [pc, #400]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d017      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e08:	4959      	ldr	r1, [pc, #356]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e18:	d101      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d017      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e36:	4b4e      	ldr	r3, [pc, #312]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	494a      	ldr	r1, [pc, #296]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e54:	d101      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e56:	2301      	movs	r3, #1
 8003e58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e62:	2301      	movs	r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 808b 	beq.w	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e84:	4b3a      	ldr	r3, [pc, #232]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	4a39      	ldr	r2, [pc, #228]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e90:	4b37      	ldr	r3, [pc, #220]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e9c:	4b35      	ldr	r3, [pc, #212]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a34      	ldr	r2, [pc, #208]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea8:	f7fe fb5c 	bl	8002564 <HAL_GetTick>
 8003eac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb0:	f7fe fb58 	bl	8002564 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	@ 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e38f      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ece:	4b28      	ldr	r3, [pc, #160]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d035      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d02e      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eec:	4b20      	ldr	r3, [pc, #128]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f00:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f02:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f06:	4a1a      	ldr	r2, [pc, #104]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f0c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f0e:	4a18      	ldr	r2, [pc, #96]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f14:	4b16      	ldr	r3, [pc, #88]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d114      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fe fb20 	bl	8002564 <HAL_GetTick>
 8003f24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fe fb1c 	bl	8002564 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e351      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ee      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f56:	d111      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f64:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f66:	400b      	ands	r3, r1
 8003f68:	4901      	ldr	r1, [pc, #4]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
 8003f6e:	e00b      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40007000 	.word	0x40007000
 8003f78:	0ffffcff 	.word	0x0ffffcff
 8003f7c:	4bac      	ldr	r3, [pc, #688]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4aab      	ldr	r2, [pc, #684]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f82:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f86:	6093      	str	r3, [r2, #8]
 8003f88:	4ba9      	ldr	r3, [pc, #676]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f94:	49a6      	ldr	r1, [pc, #664]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d010      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fa6:	4ba2      	ldr	r3, [pc, #648]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fac:	4aa0      	ldr	r2, [pc, #640]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003fb6:	4b9e      	ldr	r3, [pc, #632]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc0:	499b      	ldr	r1, [pc, #620]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fd4:	4b96      	ldr	r3, [pc, #600]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fda:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fe2:	4993      	ldr	r1, [pc, #588]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ff6:	4b8e      	ldr	r3, [pc, #568]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004004:	498a      	ldr	r1, [pc, #552]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004018:	4b85      	ldr	r3, [pc, #532]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004026:	4982      	ldr	r1, [pc, #520]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800403a:	4b7d      	ldr	r3, [pc, #500]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004040:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004048:	4979      	ldr	r1, [pc, #484]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800405c:	4b74      	ldr	r3, [pc, #464]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004062:	f023 0203 	bic.w	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	4971      	ldr	r1, [pc, #452]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800407e:	4b6c      	ldr	r3, [pc, #432]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004084:	f023 020c 	bic.w	r2, r3, #12
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408c:	4968      	ldr	r1, [pc, #416]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040a0:	4b63      	ldr	r3, [pc, #396]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ae:	4960      	ldr	r1, [pc, #384]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d0:	4957      	ldr	r1, [pc, #348]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040e4:	4b52      	ldr	r3, [pc, #328]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f2:	494f      	ldr	r1, [pc, #316]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004106:	4b4a      	ldr	r3, [pc, #296]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004114:	4946      	ldr	r1, [pc, #280]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004128:	4b41      	ldr	r3, [pc, #260]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004136:	493e      	ldr	r1, [pc, #248]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800414a:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004150:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004158:	4935      	ldr	r1, [pc, #212]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800416c:	4b30      	ldr	r3, [pc, #192]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800417a:	492d      	ldr	r1, [pc, #180]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d011      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800418e:	4b28      	ldr	r3, [pc, #160]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004194:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800419c:	4924      	ldr	r1, [pc, #144]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041ac:	d101      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041ae:	2301      	movs	r3, #1
 80041b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ce:	4b18      	ldr	r3, [pc, #96]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041dc:	4914      	ldr	r1, [pc, #80]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004200:	490b      	ldr	r1, [pc, #44]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00f      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004224:	4902      	ldr	r1, [pc, #8]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800422c:	e002      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00b      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004240:	4b8a      	ldr	r3, [pc, #552]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004246:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	4986      	ldr	r1, [pc, #536]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004264:	4b81      	ldr	r3, [pc, #516]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800426a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004274:	497d      	ldr	r1, [pc, #500]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d006      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80d6 	beq.w	800443c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004290:	4b76      	ldr	r3, [pc, #472]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a75      	ldr	r2, [pc, #468]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004296:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800429a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429c:	f7fe f962 	bl	8002564 <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042a4:	f7fe f95e 	bl	8002564 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	@ 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e195      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b6:	4b6d      	ldr	r3, [pc, #436]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d021      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d11d      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042d6:	4b65      	ldr	r3, [pc, #404]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042e4:	4b61      	ldr	r3, [pc, #388]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ea:	0e1b      	lsrs	r3, r3, #24
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	019a      	lsls	r2, r3, #6
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	061b      	lsls	r3, r3, #24
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	071b      	lsls	r3, r3, #28
 800430a:	4958      	ldr	r1, [pc, #352]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d004      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02e      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800433c:	d129      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800433e:	4b4b      	ldr	r3, [pc, #300]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800434c:	4b47      	ldr	r3, [pc, #284]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004352:	0f1b      	lsrs	r3, r3, #28
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	019a      	lsls	r2, r3, #6
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	061b      	lsls	r3, r3, #24
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	071b      	lsls	r3, r3, #28
 8004372:	493e      	ldr	r1, [pc, #248]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800437a:	4b3c      	ldr	r3, [pc, #240]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004380:	f023 021f 	bic.w	r2, r3, #31
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	3b01      	subs	r3, #1
 800438a:	4938      	ldr	r1, [pc, #224]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01d      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800439e:	4b33      	ldr	r3, [pc, #204]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a4:	0e1b      	lsrs	r3, r3, #24
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043ac:	4b2f      	ldr	r3, [pc, #188]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b2:	0f1b      	lsrs	r3, r3, #28
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	019a      	lsls	r2, r3, #6
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	431a      	orrs	r2, r3
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	071b      	lsls	r3, r3, #28
 80043d2:	4926      	ldr	r1, [pc, #152]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	019a      	lsls	r2, r3, #6
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	071b      	lsls	r3, r3, #28
 8004402:	491a      	ldr	r1, [pc, #104]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800440a:	4b18      	ldr	r3, [pc, #96]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a17      	ldr	r2, [pc, #92]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004410:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004416:	f7fe f8a5 	bl	8002564 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800441e:	f7fe f8a1 	bl	8002564 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b64      	cmp	r3, #100	@ 0x64
 800442a:	d901      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0d8      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004430:	4b0e      	ldr	r3, [pc, #56]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b01      	cmp	r3, #1
 8004440:	f040 80ce 	bne.w	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004444:	4b09      	ldr	r3, [pc, #36]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a08      	ldr	r2, [pc, #32]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800444e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fe f888 	bl	8002564 <HAL_GetTick>
 8004454:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004456:	e00b      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004458:	f7fe f884 	bl	8002564 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	@ 0x64
 8004464:	d904      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0bb      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004470:	4b5e      	ldr	r3, [pc, #376]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800447c:	d0ec      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800449a:	2b00      	cmp	r3, #0
 800449c:	d02e      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d12a      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044a6:	4b51      	ldr	r3, [pc, #324]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044b4:	4b4d      	ldr	r3, [pc, #308]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ba:	0f1b      	lsrs	r3, r3, #28
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	019a      	lsls	r2, r3, #6
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	071b      	lsls	r3, r3, #28
 80044da:	4944      	ldr	r1, [pc, #272]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044e2:	4b42      	ldr	r3, [pc, #264]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	3b01      	subs	r3, #1
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	493d      	ldr	r1, [pc, #244]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d022      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800450c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004510:	d11d      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004512:	4b36      	ldr	r3, [pc, #216]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004518:	0e1b      	lsrs	r3, r3, #24
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004520:	4b32      	ldr	r3, [pc, #200]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004526:	0f1b      	lsrs	r3, r3, #28
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	019a      	lsls	r2, r3, #6
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	431a      	orrs	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	061b      	lsls	r3, r3, #24
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	071b      	lsls	r3, r3, #28
 8004546:	4929      	ldr	r1, [pc, #164]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d028      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800455a:	4b24      	ldr	r3, [pc, #144]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004560:	0e1b      	lsrs	r3, r3, #24
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004568:	4b20      	ldr	r3, [pc, #128]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	019a      	lsls	r2, r3, #6
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	431a      	orrs	r2, r3
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	061b      	lsls	r3, r3, #24
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	071b      	lsls	r3, r3, #28
 800458e:	4917      	ldr	r1, [pc, #92]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004596:	4b15      	ldr	r3, [pc, #84]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800459c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	4911      	ldr	r1, [pc, #68]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045ac:	4b0f      	ldr	r3, [pc, #60]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0e      	ldr	r2, [pc, #56]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b8:	f7fd ffd4 	bl	8002564 <HAL_GetTick>
 80045bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045c0:	f7fd ffd0 	bl	8002564 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	@ 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e007      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045d2:	4b06      	ldr	r3, [pc, #24]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045de:	d1ef      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800

080045f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e09d      	b.n	800473e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	2b00      	cmp	r3, #0
 8004608:	d108      	bne.n	800461c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004612:	d009      	beq.n	8004628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	61da      	str	r2, [r3, #28]
 800461a:	e005      	b.n	8004628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fd fa7c 	bl	8001b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800465e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004668:	d902      	bls.n	8004670 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	e002      	b.n	8004676 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004674:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800467e:	d007      	beq.n	8004690 <HAL_SPI_Init+0xa0>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004688:	d002      	beq.n	8004690 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d2:	ea42 0103 	orr.w	r1, r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	0c1b      	lsrs	r3, r3, #16
 80046ec:	f003 0204 	and.w	r2, r3, #4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800470c:	ea42 0103 	orr.w	r1, r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800472c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e049      	b.n	80047ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d106      	bne.n	8004772 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7fd fa67 	bl	8001c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f001 f819 	bl	80057bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d001      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e054      	b.n	80048b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a26      	ldr	r2, [pc, #152]	@ (80048c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d022      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004836:	d01d      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a22      	ldr	r2, [pc, #136]	@ (80048c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d018      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a21      	ldr	r2, [pc, #132]	@ (80048cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1f      	ldr	r2, [pc, #124]	@ (80048d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00e      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1e      	ldr	r2, [pc, #120]	@ (80048d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d009      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1b      	ldr	r2, [pc, #108]	@ (80048dc <HAL_TIM_Base_Start_IT+0xe8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d115      	bne.n	80048a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	4b19      	ldr	r3, [pc, #100]	@ (80048e0 <HAL_TIM_Base_Start_IT+0xec>)
 800487c:	4013      	ands	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b06      	cmp	r3, #6
 8004884:	d015      	beq.n	80048b2 <HAL_TIM_Base_Start_IT+0xbe>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800488c:	d011      	beq.n	80048b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489e:	e008      	b.n	80048b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40010000 	.word	0x40010000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40010400 	.word	0x40010400
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40001800 	.word	0x40001800
 80048e0:	00010007 	.word	0x00010007

080048e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e049      	b.n	800498a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f841 	bl	8004992 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f000 ff4a 	bl	80057bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e049      	b.n	8004a4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d106      	bne.n	80049d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7fd fa47 	bl	8001e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2202      	movs	r2, #2
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3304      	adds	r3, #4
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f000 fee9 	bl	80057bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <HAL_TIM_PWM_Start+0x24>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e03c      	b.n	8004af2 <HAL_TIM_PWM_Start+0x9e>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d109      	bne.n	8004a92 <HAL_TIM_PWM_Start+0x3e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	bf14      	ite	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	2300      	moveq	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	e02f      	b.n	8004af2 <HAL_TIM_PWM_Start+0x9e>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d109      	bne.n	8004aac <HAL_TIM_PWM_Start+0x58>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	e022      	b.n	8004af2 <HAL_TIM_PWM_Start+0x9e>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d109      	bne.n	8004ac6 <HAL_TIM_PWM_Start+0x72>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	bf14      	ite	ne
 8004abe:	2301      	movne	r3, #1
 8004ac0:	2300      	moveq	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	e015      	b.n	8004af2 <HAL_TIM_PWM_Start+0x9e>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b10      	cmp	r3, #16
 8004aca:	d109      	bne.n	8004ae0 <HAL_TIM_PWM_Start+0x8c>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	bf14      	ite	ne
 8004ad8:	2301      	movne	r3, #1
 8004ada:	2300      	moveq	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e008      	b.n	8004af2 <HAL_TIM_PWM_Start+0x9e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	bf14      	ite	ne
 8004aec:	2301      	movne	r3, #1
 8004aee:	2300      	moveq	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e092      	b.n	8004c20 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_PWM_Start+0xb6>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b08:	e023      	b.n	8004b52 <HAL_TIM_PWM_Start+0xfe>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_PWM_Start+0xc6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b18:	e01b      	b.n	8004b52 <HAL_TIM_PWM_Start+0xfe>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_PWM_Start+0xd6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b28:	e013      	b.n	8004b52 <HAL_TIM_PWM_Start+0xfe>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	d104      	bne.n	8004b3a <HAL_TIM_PWM_Start+0xe6>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b38:	e00b      	b.n	8004b52 <HAL_TIM_PWM_Start+0xfe>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d104      	bne.n	8004b4a <HAL_TIM_PWM_Start+0xf6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b48:	e003      	b.n	8004b52 <HAL_TIM_PWM_Start+0xfe>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2201      	movs	r2, #1
 8004b58:	6839      	ldr	r1, [r7, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 fafc 	bl	8006158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a30      	ldr	r2, [pc, #192]	@ (8004c28 <HAL_TIM_PWM_Start+0x1d4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_TIM_PWM_Start+0x120>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8004c2c <HAL_TIM_PWM_Start+0x1d8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d101      	bne.n	8004b78 <HAL_TIM_PWM_Start+0x124>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <HAL_TIM_PWM_Start+0x126>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a25      	ldr	r2, [pc, #148]	@ (8004c28 <HAL_TIM_PWM_Start+0x1d4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d022      	beq.n	8004bde <HAL_TIM_PWM_Start+0x18a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba0:	d01d      	beq.n	8004bde <HAL_TIM_PWM_Start+0x18a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a22      	ldr	r2, [pc, #136]	@ (8004c30 <HAL_TIM_PWM_Start+0x1dc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d018      	beq.n	8004bde <HAL_TIM_PWM_Start+0x18a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a20      	ldr	r2, [pc, #128]	@ (8004c34 <HAL_TIM_PWM_Start+0x1e0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_TIM_PWM_Start+0x18a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1f      	ldr	r2, [pc, #124]	@ (8004c38 <HAL_TIM_PWM_Start+0x1e4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_TIM_PWM_Start+0x18a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a19      	ldr	r2, [pc, #100]	@ (8004c2c <HAL_TIM_PWM_Start+0x1d8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_TIM_PWM_Start+0x18a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	@ (8004c3c <HAL_TIM_PWM_Start+0x1e8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_TIM_PWM_Start+0x18a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a19      	ldr	r2, [pc, #100]	@ (8004c40 <HAL_TIM_PWM_Start+0x1ec>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d115      	bne.n	8004c0a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	4b17      	ldr	r3, [pc, #92]	@ (8004c44 <HAL_TIM_PWM_Start+0x1f0>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b06      	cmp	r3, #6
 8004bee:	d015      	beq.n	8004c1c <HAL_TIM_PWM_Start+0x1c8>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf6:	d011      	beq.n	8004c1c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c08:	e008      	b.n	8004c1c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0201 	orr.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e000      	b.n	8004c1e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40010400 	.word	0x40010400
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800
 8004c38:	40000c00 	.word	0x40000c00
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40001800 	.word	0x40001800
 8004c44:	00010007 	.word	0x00010007

08004c48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e049      	b.n	8004cee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f841 	bl	8004cf6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f000 fd98 	bl	80057bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e08f      	b.n	8004e40 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d106      	bne.n	8004d3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7fd f81d 	bl	8001d74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6899      	ldr	r1, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e48 <HAL_TIM_Encoder_Init+0x13c>)
 8004d4e:	400b      	ands	r3, r1
 8004d50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f000 fd2d 	bl	80057bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4b31      	ldr	r3, [pc, #196]	@ (8004e4c <HAL_TIM_Encoder_Init+0x140>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	4313      	orrs	r3, r2
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e50 <HAL_TIM_Encoder_Init+0x144>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e54 <HAL_TIM_Encoder_Init+0x148>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	4313      	orrs	r3, r2
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	011a      	lsls	r2, r3, #4
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	031b      	lsls	r3, r3, #12
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	4313      	orrs	r3, r2
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	fffebff8 	.word	0xfffebff8
 8004e4c:	fffffcfc 	.word	0xfffffcfc
 8004e50:	fffff3f3 	.word	0xfffff3f3
 8004e54:	ffff0f0f 	.word	0xffff0f0f

08004e58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d110      	bne.n	8004eaa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d102      	bne.n	8004e94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e8e:	7b7b      	ldrb	r3, [r7, #13]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d001      	beq.n	8004e98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e069      	b.n	8004f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ea8:	e031      	b.n	8004f0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d110      	bne.n	8004ed2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eb6:	7b3b      	ldrb	r3, [r7, #12]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e055      	b.n	8004f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ed0:	e01d      	b.n	8004f0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d108      	bne.n	8004eea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d105      	bne.n	8004eea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ede:	7b7b      	ldrb	r3, [r7, #13]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d102      	bne.n	8004eea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ee4:	7b3b      	ldrb	r3, [r7, #12]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d001      	beq.n	8004eee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e03e      	b.n	8004f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_TIM_Encoder_Start+0xc4>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d008      	beq.n	8004f2c <HAL_TIM_Encoder_Start+0xd4>
 8004f1a:	e00f      	b.n	8004f3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2201      	movs	r2, #1
 8004f22:	2100      	movs	r1, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f001 f917 	bl	8006158 <TIM_CCxChannelCmd>
      break;
 8004f2a:	e016      	b.n	8004f5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2201      	movs	r2, #1
 8004f32:	2104      	movs	r1, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 f90f 	bl	8006158 <TIM_CCxChannelCmd>
      break;
 8004f3a:	e00e      	b.n	8004f5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2201      	movs	r2, #1
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f001 f907 	bl	8006158 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2104      	movs	r1, #4
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 f900 	bl	8006158 <TIM_CCxChannelCmd>
      break;
 8004f58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d020      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01b      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0202 	mvn.w	r2, #2
 8004fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fbde 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fbd0 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fbe1 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d020      	beq.n	8005024 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01b      	beq.n	8005024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0204 	mvn.w	r2, #4
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fbb8 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fbaa 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fbbb 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d020      	beq.n	8005070 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01b      	beq.n	8005070 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0208 	mvn.w	r2, #8
 8005040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2204      	movs	r2, #4
 8005046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fb92 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 800505c:	e005      	b.n	800506a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fb84 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fb95 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	2b00      	cmp	r3, #0
 8005078:	d020      	beq.n	80050bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0210 	mvn.w	r2, #16
 800508c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2208      	movs	r2, #8
 8005092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fb6c 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 80050a8:	e005      	b.n	80050b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fb5e 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fb6f 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00c      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0201 	mvn.w	r2, #1
 80050d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb fac4 	bl	8000668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00c      	beq.n	800510e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f001 f961 	bl	80063d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00c      	beq.n	8005132 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800512a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f001 f959 	bl	80063e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00c      	beq.n	8005156 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d007      	beq.n	8005156 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800514e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fb29 	bl	80057a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00c      	beq.n	800517a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0220 	mvn.w	r2, #32
 8005172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f001 f921 	bl	80063bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800519e:	2302      	movs	r3, #2
 80051a0:	e066      	b.n	8005270 <HAL_TIM_OC_ConfigChannel+0xec>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b14      	cmp	r3, #20
 80051ae:	d857      	bhi.n	8005260 <HAL_TIM_OC_ConfigChannel+0xdc>
 80051b0:	a201      	add	r2, pc, #4	@ (adr r2, 80051b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	0800520d 	.word	0x0800520d
 80051bc:	08005261 	.word	0x08005261
 80051c0:	08005261 	.word	0x08005261
 80051c4:	08005261 	.word	0x08005261
 80051c8:	0800521b 	.word	0x0800521b
 80051cc:	08005261 	.word	0x08005261
 80051d0:	08005261 	.word	0x08005261
 80051d4:	08005261 	.word	0x08005261
 80051d8:	08005229 	.word	0x08005229
 80051dc:	08005261 	.word	0x08005261
 80051e0:	08005261 	.word	0x08005261
 80051e4:	08005261 	.word	0x08005261
 80051e8:	08005237 	.word	0x08005237
 80051ec:	08005261 	.word	0x08005261
 80051f0:	08005261 	.word	0x08005261
 80051f4:	08005261 	.word	0x08005261
 80051f8:	08005245 	.word	0x08005245
 80051fc:	08005261 	.word	0x08005261
 8005200:	08005261 	.word	0x08005261
 8005204:	08005261 	.word	0x08005261
 8005208:	08005253 	.word	0x08005253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fb7e 	bl	8005914 <TIM_OC1_SetConfig>
      break;
 8005218:	e025      	b.n	8005266 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fbe9 	bl	80059f8 <TIM_OC2_SetConfig>
      break;
 8005226:	e01e      	b.n	8005266 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fc5a 	bl	8005ae8 <TIM_OC3_SetConfig>
      break;
 8005234:	e017      	b.n	8005266 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fcc9 	bl	8005bd4 <TIM_OC4_SetConfig>
      break;
 8005242:	e010      	b.n	8005266 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fd1a 	bl	8005c84 <TIM_OC5_SetConfig>
      break;
 8005250:	e009      	b.n	8005266 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fd65 	bl	8005d28 <TIM_OC6_SetConfig>
      break;
 800525e:	e002      	b.n	8005266 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	75fb      	strb	r3, [r7, #23]
      break;
 8005264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800526e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005292:	2302      	movs	r3, #2
 8005294:	e088      	b.n	80053a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80052b4:	f000 fd8c 	bl	8005dd0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 020c 	bic.w	r2, r2, #12
 80052c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6999      	ldr	r1, [r3, #24]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	619a      	str	r2, [r3, #24]
 80052da:	e060      	b.n	800539e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d11c      	bne.n	800531c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80052f2:	f000 fe10 	bl	8005f16 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005304:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6999      	ldr	r1, [r3, #24]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	021a      	lsls	r2, r3, #8
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	619a      	str	r2, [r3, #24]
 800531a:	e040      	b.n	800539e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b08      	cmp	r3, #8
 8005320:	d11b      	bne.n	800535a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005332:	f000 fe5d 	bl	8005ff0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 020c 	bic.w	r2, r2, #12
 8005344:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69d9      	ldr	r1, [r3, #28]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	61da      	str	r2, [r3, #28]
 8005358:	e021      	b.n	800539e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	d11c      	bne.n	800539a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005370:	f000 fe7a 	bl	8006068 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69da      	ldr	r2, [r3, #28]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005382:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69d9      	ldr	r1, [r3, #28]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	021a      	lsls	r2, r3, #8
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	61da      	str	r2, [r3, #28]
 8005398:	e001      	b.n	800539e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e0ff      	b.n	80055ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b14      	cmp	r3, #20
 80053da:	f200 80f0 	bhi.w	80055be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053de:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005439 	.word	0x08005439
 80053e8:	080055bf 	.word	0x080055bf
 80053ec:	080055bf 	.word	0x080055bf
 80053f0:	080055bf 	.word	0x080055bf
 80053f4:	08005479 	.word	0x08005479
 80053f8:	080055bf 	.word	0x080055bf
 80053fc:	080055bf 	.word	0x080055bf
 8005400:	080055bf 	.word	0x080055bf
 8005404:	080054bb 	.word	0x080054bb
 8005408:	080055bf 	.word	0x080055bf
 800540c:	080055bf 	.word	0x080055bf
 8005410:	080055bf 	.word	0x080055bf
 8005414:	080054fb 	.word	0x080054fb
 8005418:	080055bf 	.word	0x080055bf
 800541c:	080055bf 	.word	0x080055bf
 8005420:	080055bf 	.word	0x080055bf
 8005424:	0800553d 	.word	0x0800553d
 8005428:	080055bf 	.word	0x080055bf
 800542c:	080055bf 	.word	0x080055bf
 8005430:	080055bf 	.word	0x080055bf
 8005434:	0800557d 	.word	0x0800557d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fa68 	bl	8005914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0208 	orr.w	r2, r2, #8
 8005452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0204 	bic.w	r2, r2, #4
 8005462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6999      	ldr	r1, [r3, #24]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	619a      	str	r2, [r3, #24]
      break;
 8005476:	e0a5      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 faba 	bl	80059f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6999      	ldr	r1, [r3, #24]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]
      break;
 80054b8:	e084      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fb11 	bl	8005ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0208 	orr.w	r2, r2, #8
 80054d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0204 	bic.w	r2, r2, #4
 80054e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69d9      	ldr	r1, [r3, #28]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	61da      	str	r2, [r3, #28]
      break;
 80054f8:	e064      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb67 	bl	8005bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	021a      	lsls	r2, r3, #8
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	61da      	str	r2, [r3, #28]
      break;
 800553a:	e043      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fb9e 	bl	8005c84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0208 	orr.w	r2, r2, #8
 8005556:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0204 	bic.w	r2, r2, #4
 8005566:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800557a:	e023      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fbd0 	bl	8005d28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005596:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	021a      	lsls	r2, r3, #8
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055bc:	e002      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
      break;
 80055c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop

080055d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_TIM_ConfigClockSource+0x1c>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e0b4      	b.n	800575e <HAL_TIM_ConfigClockSource+0x186>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	4b56      	ldr	r3, [pc, #344]	@ (8005768 <HAL_TIM_ConfigClockSource+0x190>)
 8005610:	4013      	ands	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800561a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800562c:	d03e      	beq.n	80056ac <HAL_TIM_ConfigClockSource+0xd4>
 800562e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005632:	f200 8087 	bhi.w	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563a:	f000 8086 	beq.w	800574a <HAL_TIM_ConfigClockSource+0x172>
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005642:	d87f      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005644:	2b70      	cmp	r3, #112	@ 0x70
 8005646:	d01a      	beq.n	800567e <HAL_TIM_ConfigClockSource+0xa6>
 8005648:	2b70      	cmp	r3, #112	@ 0x70
 800564a:	d87b      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 800564c:	2b60      	cmp	r3, #96	@ 0x60
 800564e:	d050      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005650:	2b60      	cmp	r3, #96	@ 0x60
 8005652:	d877      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b50      	cmp	r3, #80	@ 0x50
 8005656:	d03c      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005658:	2b50      	cmp	r3, #80	@ 0x50
 800565a:	d873      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b40      	cmp	r3, #64	@ 0x40
 800565e:	d058      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x13a>
 8005660:	2b40      	cmp	r3, #64	@ 0x40
 8005662:	d86f      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b30      	cmp	r3, #48	@ 0x30
 8005666:	d064      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 8005668:	2b30      	cmp	r3, #48	@ 0x30
 800566a:	d86b      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b20      	cmp	r3, #32
 800566e:	d060      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 8005670:	2b20      	cmp	r3, #32
 8005672:	d867      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d05c      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 8005678:	2b10      	cmp	r3, #16
 800567a:	d05a      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 800567c:	e062      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800568e:	f000 fd43 	bl	8006118 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	609a      	str	r2, [r3, #8]
      break;
 80056aa:	e04f      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056bc:	f000 fd2c 	bl	8006118 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ce:	609a      	str	r2, [r3, #8]
      break;
 80056d0:	e03c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056de:	461a      	mov	r2, r3
 80056e0:	f000 fbea 	bl	8005eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2150      	movs	r1, #80	@ 0x50
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fcf9 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 80056f0:	e02c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056fe:	461a      	mov	r2, r3
 8005700:	f000 fc46 	bl	8005f90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2160      	movs	r1, #96	@ 0x60
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fce9 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005710:	e01c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800571e:	461a      	mov	r2, r3
 8005720:	f000 fbca 	bl	8005eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2140      	movs	r1, #64	@ 0x40
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fcd9 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005730:	e00c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f000 fcd0 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005742:	e003      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
      break;
 8005748:	e000      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800574a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	fffeff88 	.word	0xfffeff88

0800576c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a46      	ldr	r2, [pc, #280]	@ (80058e8 <TIM_Base_SetConfig+0x12c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <TIM_Base_SetConfig+0x40>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057da:	d00f      	beq.n	80057fc <TIM_Base_SetConfig+0x40>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a43      	ldr	r2, [pc, #268]	@ (80058ec <TIM_Base_SetConfig+0x130>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00b      	beq.n	80057fc <TIM_Base_SetConfig+0x40>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a42      	ldr	r2, [pc, #264]	@ (80058f0 <TIM_Base_SetConfig+0x134>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d007      	beq.n	80057fc <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a41      	ldr	r2, [pc, #260]	@ (80058f4 <TIM_Base_SetConfig+0x138>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a40      	ldr	r2, [pc, #256]	@ (80058f8 <TIM_Base_SetConfig+0x13c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d108      	bne.n	800580e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a35      	ldr	r2, [pc, #212]	@ (80058e8 <TIM_Base_SetConfig+0x12c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02b      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581c:	d027      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a32      	ldr	r2, [pc, #200]	@ (80058ec <TIM_Base_SetConfig+0x130>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d023      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a31      	ldr	r2, [pc, #196]	@ (80058f0 <TIM_Base_SetConfig+0x134>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01f      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a30      	ldr	r2, [pc, #192]	@ (80058f4 <TIM_Base_SetConfig+0x138>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01b      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2f      	ldr	r2, [pc, #188]	@ (80058f8 <TIM_Base_SetConfig+0x13c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d017      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2e      	ldr	r2, [pc, #184]	@ (80058fc <TIM_Base_SetConfig+0x140>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2d      	ldr	r2, [pc, #180]	@ (8005900 <TIM_Base_SetConfig+0x144>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00f      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2c      	ldr	r2, [pc, #176]	@ (8005904 <TIM_Base_SetConfig+0x148>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00b      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2b      	ldr	r2, [pc, #172]	@ (8005908 <TIM_Base_SetConfig+0x14c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d007      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2a      	ldr	r2, [pc, #168]	@ (800590c <TIM_Base_SetConfig+0x150>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a29      	ldr	r2, [pc, #164]	@ (8005910 <TIM_Base_SetConfig+0x154>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d108      	bne.n	8005880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a10      	ldr	r2, [pc, #64]	@ (80058e8 <TIM_Base_SetConfig+0x12c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_Base_SetConfig+0xf8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a12      	ldr	r2, [pc, #72]	@ (80058f8 <TIM_Base_SetConfig+0x13c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d103      	bne.n	80058bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d105      	bne.n	80058da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	611a      	str	r2, [r3, #16]
  }
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40010400 	.word	0x40010400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800
 8005908:	40001800 	.word	0x40001800
 800590c:	40001c00 	.word	0x40001c00
 8005910:	40002000 	.word	0x40002000

08005914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f023 0201 	bic.w	r2, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4b2b      	ldr	r3, [pc, #172]	@ (80059ec <TIM_OC1_SetConfig+0xd8>)
 8005940:	4013      	ands	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0303 	bic.w	r3, r3, #3
 800594a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f023 0302 	bic.w	r3, r3, #2
 800595c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a21      	ldr	r2, [pc, #132]	@ (80059f0 <TIM_OC1_SetConfig+0xdc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC1_SetConfig+0x64>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a20      	ldr	r2, [pc, #128]	@ (80059f4 <TIM_OC1_SetConfig+0xe0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10c      	bne.n	8005992 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0308 	bic.w	r3, r3, #8
 800597e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f023 0304 	bic.w	r3, r3, #4
 8005990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a16      	ldr	r2, [pc, #88]	@ (80059f0 <TIM_OC1_SetConfig+0xdc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC1_SetConfig+0x8e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a15      	ldr	r2, [pc, #84]	@ (80059f4 <TIM_OC1_SetConfig+0xe0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d111      	bne.n	80059c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	fffeff8f 	.word	0xfffeff8f
 80059f0:	40010000 	.word	0x40010000
 80059f4:	40010400 	.word	0x40010400

080059f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f023 0210 	bic.w	r2, r3, #16
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4b2e      	ldr	r3, [pc, #184]	@ (8005adc <TIM_OC2_SetConfig+0xe4>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f023 0320 	bic.w	r3, r3, #32
 8005a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a23      	ldr	r2, [pc, #140]	@ (8005ae0 <TIM_OC2_SetConfig+0xe8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC2_SetConfig+0x68>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a22      	ldr	r2, [pc, #136]	@ (8005ae4 <TIM_OC2_SetConfig+0xec>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10d      	bne.n	8005a7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ae0 <TIM_OC2_SetConfig+0xe8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d003      	beq.n	8005a8c <TIM_OC2_SetConfig+0x94>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a17      	ldr	r2, [pc, #92]	@ (8005ae4 <TIM_OC2_SetConfig+0xec>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d113      	bne.n	8005ab4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	feff8fff 	.word	0xfeff8fff
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40010400 	.word	0x40010400

08005ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4b2d      	ldr	r3, [pc, #180]	@ (8005bc8 <TIM_OC3_SetConfig+0xe0>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0303 	bic.w	r3, r3, #3
 8005b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a22      	ldr	r2, [pc, #136]	@ (8005bcc <TIM_OC3_SetConfig+0xe4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_OC3_SetConfig+0x66>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a21      	ldr	r2, [pc, #132]	@ (8005bd0 <TIM_OC3_SetConfig+0xe8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d10d      	bne.n	8005b6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <TIM_OC3_SetConfig+0xe4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_OC3_SetConfig+0x92>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a16      	ldr	r2, [pc, #88]	@ (8005bd0 <TIM_OC3_SetConfig+0xe8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d113      	bne.n	8005ba2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	bf00      	nop
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	fffeff8f 	.word	0xfffeff8f
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8005c78 <TIM_OC4_SetConfig+0xa4>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	031b      	lsls	r3, r3, #12
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a13      	ldr	r2, [pc, #76]	@ (8005c7c <TIM_OC4_SetConfig+0xa8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC4_SetConfig+0x68>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a12      	ldr	r2, [pc, #72]	@ (8005c80 <TIM_OC4_SetConfig+0xac>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d109      	bne.n	8005c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	019b      	lsls	r3, r3, #6
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	feff8fff 	.word	0xfeff8fff
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4b1b      	ldr	r3, [pc, #108]	@ (8005d1c <TIM_OC5_SetConfig+0x98>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005cc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a12      	ldr	r2, [pc, #72]	@ (8005d20 <TIM_OC5_SetConfig+0x9c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC5_SetConfig+0x5e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a11      	ldr	r2, [pc, #68]	@ (8005d24 <TIM_OC5_SetConfig+0xa0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d109      	bne.n	8005cf6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	621a      	str	r2, [r3, #32]
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	fffeff8f 	.word	0xfffeff8f
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40010400 	.word	0x40010400

08005d28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc4 <TIM_OC6_SetConfig+0x9c>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	051b      	lsls	r3, r3, #20
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a13      	ldr	r2, [pc, #76]	@ (8005dc8 <TIM_OC6_SetConfig+0xa0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC6_SetConfig+0x60>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a12      	ldr	r2, [pc, #72]	@ (8005dcc <TIM_OC6_SetConfig+0xa4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d109      	bne.n	8005d9c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	feff8fff 	.word	0xfeff8fff
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40010400 	.word	0x40010400

08005dd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f023 0201 	bic.w	r2, r3, #1
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4a28      	ldr	r2, [pc, #160]	@ (8005e9c <TIM_TI1_SetConfig+0xcc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01b      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e04:	d017      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4a25      	ldr	r2, [pc, #148]	@ (8005ea0 <TIM_TI1_SetConfig+0xd0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a24      	ldr	r2, [pc, #144]	@ (8005ea4 <TIM_TI1_SetConfig+0xd4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00f      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4a23      	ldr	r2, [pc, #140]	@ (8005ea8 <TIM_TI1_SetConfig+0xd8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a22      	ldr	r2, [pc, #136]	@ (8005eac <TIM_TI1_SetConfig+0xdc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a21      	ldr	r2, [pc, #132]	@ (8005eb0 <TIM_TI1_SetConfig+0xe0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a20      	ldr	r2, [pc, #128]	@ (8005eb4 <TIM_TI1_SetConfig+0xe4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <TIM_TI1_SetConfig+0x6a>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <TIM_TI1_SetConfig+0x6c>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e003      	b.n	8005e5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f023 030a 	bic.w	r3, r3, #10
 8005e74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f003 030a 	and.w	r3, r3, #10
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	621a      	str	r2, [r3, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00
 8005eac:	40010400 	.word	0x40010400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40001800 	.word	0x40001800

08005eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f023 0201 	bic.w	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 030a 	bic.w	r3, r3, #10
 8005ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b087      	sub	sp, #28
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
 8005f22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f023 0210 	bic.w	r2, r3, #16
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f023 0210 	bic.w	r2, r3, #16
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	031b      	lsls	r3, r3, #12
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	621a      	str	r2, [r3, #32]
}
 8005fe4:	bf00      	nop
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f023 0303 	bic.w	r3, r3, #3
 800601c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800602c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	b2db      	uxtb	r3, r3
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006040:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	621a      	str	r2, [r3, #32]
}
 800605c:	bf00      	nop
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006094:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	031b      	lsls	r3, r3, #12
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80060ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	031b      	lsls	r3, r3, #12
 80060c0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	f043 0307 	orr.w	r3, r3, #7
 8006104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	609a      	str	r2, [r3, #8]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	021a      	lsls	r2, r3, #8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	431a      	orrs	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4313      	orrs	r3, r2
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	609a      	str	r2, [r3, #8]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	2201      	movs	r2, #1
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	43db      	mvns	r3, r3
 800617a:	401a      	ands	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	431a      	orrs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e06d      	b.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a30      	ldr	r2, [pc, #192]	@ (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d004      	beq.n	80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a2f      	ldr	r2, [pc, #188]	@ (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d108      	bne.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80061f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006208:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a20      	ldr	r2, [pc, #128]	@ (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d022      	beq.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622e:	d01d      	beq.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1d      	ldr	r2, [pc, #116]	@ (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d018      	beq.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1c      	ldr	r2, [pc, #112]	@ (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1a      	ldr	r2, [pc, #104]	@ (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00e      	beq.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a15      	ldr	r2, [pc, #84]	@ (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d009      	beq.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a16      	ldr	r2, [pc, #88]	@ (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d004      	beq.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a15      	ldr	r2, [pc, #84]	@ (80062bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d10c      	bne.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	4313      	orrs	r3, r2
 800627c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40010400 	.word	0x40010400
 80062ac:	40000400 	.word	0x40000400
 80062b0:	40000800 	.word	0x40000800
 80062b4:	40000c00 	.word	0x40000c00
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40001800 	.word	0x40001800

080062c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062d8:	2302      	movs	r3, #2
 80062da:	e065      	b.n	80063a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a16      	ldr	r2, [pc, #88]	@ (80063b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d004      	beq.n	800636a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a14      	ldr	r2, [pc, #80]	@ (80063b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d115      	bne.n	8006396 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006374:	051b      	lsls	r3, r3, #20
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40010400 	.word	0x40010400

080063bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e040      	b.n	800648c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d106      	bne.n	8006420 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7fb fe0c 	bl	8002038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2224      	movs	r2, #36	@ 0x24
 8006424:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0201 	bic.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fbde 	bl	8006c00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f977 	bl	8006738 <UART_SetConfig>
 800644a:	4603      	mov	r3, r0
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e01b      	b.n	800648c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fc5d 	bl	8006d44 <UART_CheckIdleState>
 800648a:	4603      	mov	r3, r0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	@ 0x28
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d177      	bne.n	800659c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_UART_Transmit+0x24>
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e070      	b.n	800659e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2221      	movs	r2, #33	@ 0x21
 80064c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ca:	f7fc f84b 	bl	8002564 <HAL_GetTick>
 80064ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	88fa      	ldrh	r2, [r7, #6]
 80064d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e8:	d108      	bne.n	80064fc <HAL_UART_Transmit+0x68>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	e003      	b.n	8006504 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006504:	e02f      	b.n	8006566 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2200      	movs	r2, #0
 800650e:	2180      	movs	r1, #128	@ 0x80
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fcbf 	bl	8006e94 <UART_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e03b      	b.n	800659e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10b      	bne.n	8006544 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800653a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	3302      	adds	r3, #2
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	e007      	b.n	8006554 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	781a      	ldrb	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	3301      	adds	r3, #1
 8006552:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1c9      	bne.n	8006506 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2200      	movs	r2, #0
 800657a:	2140      	movs	r1, #64	@ 0x40
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fc89 	bl	8006e94 <UART_WaitOnFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e005      	b.n	800659e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	e000      	b.n	800659e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800659c:	2302      	movs	r3, #2
  }
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b08a      	sub	sp, #40	@ 0x28
 80065aa:	af02      	add	r7, sp, #8
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	603b      	str	r3, [r7, #0]
 80065b2:	4613      	mov	r3, r2
 80065b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065bc:	2b20      	cmp	r3, #32
 80065be:	f040 80b5 	bne.w	800672c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <HAL_UART_Receive+0x28>
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e0ad      	b.n	800672e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2222      	movs	r2, #34	@ 0x22
 80065de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065e8:	f7fb ffbc 	bl	8002564 <HAL_GetTick>
 80065ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	88fa      	ldrh	r2, [r7, #6]
 80065f2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	88fa      	ldrh	r2, [r7, #6]
 80065fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006606:	d10e      	bne.n	8006626 <HAL_UART_Receive+0x80>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <HAL_UART_Receive+0x76>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006616:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800661a:	e02d      	b.n	8006678 <HAL_UART_Receive+0xd2>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	22ff      	movs	r2, #255	@ 0xff
 8006620:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006624:	e028      	b.n	8006678 <HAL_UART_Receive+0xd2>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10d      	bne.n	800664a <HAL_UART_Receive+0xa4>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <HAL_UART_Receive+0x9a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	22ff      	movs	r2, #255	@ 0xff
 800663a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800663e:	e01b      	b.n	8006678 <HAL_UART_Receive+0xd2>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	227f      	movs	r2, #127	@ 0x7f
 8006644:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006648:	e016      	b.n	8006678 <HAL_UART_Receive+0xd2>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006652:	d10d      	bne.n	8006670 <HAL_UART_Receive+0xca>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <HAL_UART_Receive+0xc0>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	227f      	movs	r2, #127	@ 0x7f
 8006660:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006664:	e008      	b.n	8006678 <HAL_UART_Receive+0xd2>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	223f      	movs	r2, #63	@ 0x3f
 800666a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800666e:	e003      	b.n	8006678 <HAL_UART_Receive+0xd2>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800667e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006688:	d108      	bne.n	800669c <HAL_UART_Receive+0xf6>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	e003      	b.n	80066a4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80066a4:	e036      	b.n	8006714 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2200      	movs	r2, #0
 80066ae:	2120      	movs	r1, #32
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fbef 	bl	8006e94 <UART_WaitOnFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2220      	movs	r2, #32
 80066c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e032      	b.n	800672e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10c      	bne.n	80066e8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	8a7b      	ldrh	r3, [r7, #18]
 80066d8:	4013      	ands	r3, r2
 80066da:	b29a      	uxth	r2, r3
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	3302      	adds	r3, #2
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	e00c      	b.n	8006702 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	8a7b      	ldrh	r3, [r7, #18]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	4013      	ands	r3, r2
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	3301      	adds	r3, #1
 8006700:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1c2      	bne.n	80066a6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	e000      	b.n	800672e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800672c:	2302      	movs	r3, #2
  }
}
 800672e:	4618      	mov	r0, r3
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4ba6      	ldr	r3, [pc, #664]	@ (80069fc <UART_SetConfig+0x2c4>)
 8006764:	4013      	ands	r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	6979      	ldr	r1, [r7, #20]
 800676c:	430b      	orrs	r3, r1
 800676e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a94      	ldr	r2, [pc, #592]	@ (8006a00 <UART_SetConfig+0x2c8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d120      	bne.n	80067f6 <UART_SetConfig+0xbe>
 80067b4:	4b93      	ldr	r3, [pc, #588]	@ (8006a04 <UART_SetConfig+0x2cc>)
 80067b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d816      	bhi.n	80067f0 <UART_SetConfig+0xb8>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <UART_SetConfig+0x90>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067e5 	.word	0x080067e5
 80067d0:	080067df 	.word	0x080067df
 80067d4:	080067eb 	.word	0x080067eb
 80067d8:	2301      	movs	r3, #1
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e150      	b.n	8006a80 <UART_SetConfig+0x348>
 80067de:	2302      	movs	r3, #2
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e14d      	b.n	8006a80 <UART_SetConfig+0x348>
 80067e4:	2304      	movs	r3, #4
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e14a      	b.n	8006a80 <UART_SetConfig+0x348>
 80067ea:	2308      	movs	r3, #8
 80067ec:	77fb      	strb	r3, [r7, #31]
 80067ee:	e147      	b.n	8006a80 <UART_SetConfig+0x348>
 80067f0:	2310      	movs	r3, #16
 80067f2:	77fb      	strb	r3, [r7, #31]
 80067f4:	e144      	b.n	8006a80 <UART_SetConfig+0x348>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a83      	ldr	r2, [pc, #524]	@ (8006a08 <UART_SetConfig+0x2d0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d132      	bne.n	8006866 <UART_SetConfig+0x12e>
 8006800:	4b80      	ldr	r3, [pc, #512]	@ (8006a04 <UART_SetConfig+0x2cc>)
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006806:	f003 030c 	and.w	r3, r3, #12
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d828      	bhi.n	8006860 <UART_SetConfig+0x128>
 800680e:	a201      	add	r2, pc, #4	@ (adr r2, 8006814 <UART_SetConfig+0xdc>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006849 	.word	0x08006849
 8006818:	08006861 	.word	0x08006861
 800681c:	08006861 	.word	0x08006861
 8006820:	08006861 	.word	0x08006861
 8006824:	08006855 	.word	0x08006855
 8006828:	08006861 	.word	0x08006861
 800682c:	08006861 	.word	0x08006861
 8006830:	08006861 	.word	0x08006861
 8006834:	0800684f 	.word	0x0800684f
 8006838:	08006861 	.word	0x08006861
 800683c:	08006861 	.word	0x08006861
 8006840:	08006861 	.word	0x08006861
 8006844:	0800685b 	.word	0x0800685b
 8006848:	2300      	movs	r3, #0
 800684a:	77fb      	strb	r3, [r7, #31]
 800684c:	e118      	b.n	8006a80 <UART_SetConfig+0x348>
 800684e:	2302      	movs	r3, #2
 8006850:	77fb      	strb	r3, [r7, #31]
 8006852:	e115      	b.n	8006a80 <UART_SetConfig+0x348>
 8006854:	2304      	movs	r3, #4
 8006856:	77fb      	strb	r3, [r7, #31]
 8006858:	e112      	b.n	8006a80 <UART_SetConfig+0x348>
 800685a:	2308      	movs	r3, #8
 800685c:	77fb      	strb	r3, [r7, #31]
 800685e:	e10f      	b.n	8006a80 <UART_SetConfig+0x348>
 8006860:	2310      	movs	r3, #16
 8006862:	77fb      	strb	r3, [r7, #31]
 8006864:	e10c      	b.n	8006a80 <UART_SetConfig+0x348>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a68      	ldr	r2, [pc, #416]	@ (8006a0c <UART_SetConfig+0x2d4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d120      	bne.n	80068b2 <UART_SetConfig+0x17a>
 8006870:	4b64      	ldr	r3, [pc, #400]	@ (8006a04 <UART_SetConfig+0x2cc>)
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006876:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800687a:	2b30      	cmp	r3, #48	@ 0x30
 800687c:	d013      	beq.n	80068a6 <UART_SetConfig+0x16e>
 800687e:	2b30      	cmp	r3, #48	@ 0x30
 8006880:	d814      	bhi.n	80068ac <UART_SetConfig+0x174>
 8006882:	2b20      	cmp	r3, #32
 8006884:	d009      	beq.n	800689a <UART_SetConfig+0x162>
 8006886:	2b20      	cmp	r3, #32
 8006888:	d810      	bhi.n	80068ac <UART_SetConfig+0x174>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <UART_SetConfig+0x15c>
 800688e:	2b10      	cmp	r3, #16
 8006890:	d006      	beq.n	80068a0 <UART_SetConfig+0x168>
 8006892:	e00b      	b.n	80068ac <UART_SetConfig+0x174>
 8006894:	2300      	movs	r3, #0
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e0f2      	b.n	8006a80 <UART_SetConfig+0x348>
 800689a:	2302      	movs	r3, #2
 800689c:	77fb      	strb	r3, [r7, #31]
 800689e:	e0ef      	b.n	8006a80 <UART_SetConfig+0x348>
 80068a0:	2304      	movs	r3, #4
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e0ec      	b.n	8006a80 <UART_SetConfig+0x348>
 80068a6:	2308      	movs	r3, #8
 80068a8:	77fb      	strb	r3, [r7, #31]
 80068aa:	e0e9      	b.n	8006a80 <UART_SetConfig+0x348>
 80068ac:	2310      	movs	r3, #16
 80068ae:	77fb      	strb	r3, [r7, #31]
 80068b0:	e0e6      	b.n	8006a80 <UART_SetConfig+0x348>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a56      	ldr	r2, [pc, #344]	@ (8006a10 <UART_SetConfig+0x2d8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d120      	bne.n	80068fe <UART_SetConfig+0x1c6>
 80068bc:	4b51      	ldr	r3, [pc, #324]	@ (8006a04 <UART_SetConfig+0x2cc>)
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068c8:	d013      	beq.n	80068f2 <UART_SetConfig+0x1ba>
 80068ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80068cc:	d814      	bhi.n	80068f8 <UART_SetConfig+0x1c0>
 80068ce:	2b80      	cmp	r3, #128	@ 0x80
 80068d0:	d009      	beq.n	80068e6 <UART_SetConfig+0x1ae>
 80068d2:	2b80      	cmp	r3, #128	@ 0x80
 80068d4:	d810      	bhi.n	80068f8 <UART_SetConfig+0x1c0>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <UART_SetConfig+0x1a8>
 80068da:	2b40      	cmp	r3, #64	@ 0x40
 80068dc:	d006      	beq.n	80068ec <UART_SetConfig+0x1b4>
 80068de:	e00b      	b.n	80068f8 <UART_SetConfig+0x1c0>
 80068e0:	2300      	movs	r3, #0
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e0cc      	b.n	8006a80 <UART_SetConfig+0x348>
 80068e6:	2302      	movs	r3, #2
 80068e8:	77fb      	strb	r3, [r7, #31]
 80068ea:	e0c9      	b.n	8006a80 <UART_SetConfig+0x348>
 80068ec:	2304      	movs	r3, #4
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e0c6      	b.n	8006a80 <UART_SetConfig+0x348>
 80068f2:	2308      	movs	r3, #8
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e0c3      	b.n	8006a80 <UART_SetConfig+0x348>
 80068f8:	2310      	movs	r3, #16
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e0c0      	b.n	8006a80 <UART_SetConfig+0x348>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a44      	ldr	r2, [pc, #272]	@ (8006a14 <UART_SetConfig+0x2dc>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d125      	bne.n	8006954 <UART_SetConfig+0x21c>
 8006908:	4b3e      	ldr	r3, [pc, #248]	@ (8006a04 <UART_SetConfig+0x2cc>)
 800690a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006916:	d017      	beq.n	8006948 <UART_SetConfig+0x210>
 8006918:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800691c:	d817      	bhi.n	800694e <UART_SetConfig+0x216>
 800691e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006922:	d00b      	beq.n	800693c <UART_SetConfig+0x204>
 8006924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006928:	d811      	bhi.n	800694e <UART_SetConfig+0x216>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <UART_SetConfig+0x1fe>
 800692e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006932:	d006      	beq.n	8006942 <UART_SetConfig+0x20a>
 8006934:	e00b      	b.n	800694e <UART_SetConfig+0x216>
 8006936:	2300      	movs	r3, #0
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e0a1      	b.n	8006a80 <UART_SetConfig+0x348>
 800693c:	2302      	movs	r3, #2
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e09e      	b.n	8006a80 <UART_SetConfig+0x348>
 8006942:	2304      	movs	r3, #4
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e09b      	b.n	8006a80 <UART_SetConfig+0x348>
 8006948:	2308      	movs	r3, #8
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e098      	b.n	8006a80 <UART_SetConfig+0x348>
 800694e:	2310      	movs	r3, #16
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e095      	b.n	8006a80 <UART_SetConfig+0x348>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a2f      	ldr	r2, [pc, #188]	@ (8006a18 <UART_SetConfig+0x2e0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d125      	bne.n	80069aa <UART_SetConfig+0x272>
 800695e:	4b29      	ldr	r3, [pc, #164]	@ (8006a04 <UART_SetConfig+0x2cc>)
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006964:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006968:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800696c:	d017      	beq.n	800699e <UART_SetConfig+0x266>
 800696e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006972:	d817      	bhi.n	80069a4 <UART_SetConfig+0x26c>
 8006974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006978:	d00b      	beq.n	8006992 <UART_SetConfig+0x25a>
 800697a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800697e:	d811      	bhi.n	80069a4 <UART_SetConfig+0x26c>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <UART_SetConfig+0x254>
 8006984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006988:	d006      	beq.n	8006998 <UART_SetConfig+0x260>
 800698a:	e00b      	b.n	80069a4 <UART_SetConfig+0x26c>
 800698c:	2301      	movs	r3, #1
 800698e:	77fb      	strb	r3, [r7, #31]
 8006990:	e076      	b.n	8006a80 <UART_SetConfig+0x348>
 8006992:	2302      	movs	r3, #2
 8006994:	77fb      	strb	r3, [r7, #31]
 8006996:	e073      	b.n	8006a80 <UART_SetConfig+0x348>
 8006998:	2304      	movs	r3, #4
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	e070      	b.n	8006a80 <UART_SetConfig+0x348>
 800699e:	2308      	movs	r3, #8
 80069a0:	77fb      	strb	r3, [r7, #31]
 80069a2:	e06d      	b.n	8006a80 <UART_SetConfig+0x348>
 80069a4:	2310      	movs	r3, #16
 80069a6:	77fb      	strb	r3, [r7, #31]
 80069a8:	e06a      	b.n	8006a80 <UART_SetConfig+0x348>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1b      	ldr	r2, [pc, #108]	@ (8006a1c <UART_SetConfig+0x2e4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d138      	bne.n	8006a26 <UART_SetConfig+0x2ee>
 80069b4:	4b13      	ldr	r3, [pc, #76]	@ (8006a04 <UART_SetConfig+0x2cc>)
 80069b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80069be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069c2:	d017      	beq.n	80069f4 <UART_SetConfig+0x2bc>
 80069c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069c8:	d82a      	bhi.n	8006a20 <UART_SetConfig+0x2e8>
 80069ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ce:	d00b      	beq.n	80069e8 <UART_SetConfig+0x2b0>
 80069d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d4:	d824      	bhi.n	8006a20 <UART_SetConfig+0x2e8>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <UART_SetConfig+0x2aa>
 80069da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069de:	d006      	beq.n	80069ee <UART_SetConfig+0x2b6>
 80069e0:	e01e      	b.n	8006a20 <UART_SetConfig+0x2e8>
 80069e2:	2300      	movs	r3, #0
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e04b      	b.n	8006a80 <UART_SetConfig+0x348>
 80069e8:	2302      	movs	r3, #2
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	e048      	b.n	8006a80 <UART_SetConfig+0x348>
 80069ee:	2304      	movs	r3, #4
 80069f0:	77fb      	strb	r3, [r7, #31]
 80069f2:	e045      	b.n	8006a80 <UART_SetConfig+0x348>
 80069f4:	2308      	movs	r3, #8
 80069f6:	77fb      	strb	r3, [r7, #31]
 80069f8:	e042      	b.n	8006a80 <UART_SetConfig+0x348>
 80069fa:	bf00      	nop
 80069fc:	efff69f3 	.word	0xefff69f3
 8006a00:	40011000 	.word	0x40011000
 8006a04:	40023800 	.word	0x40023800
 8006a08:	40004400 	.word	0x40004400
 8006a0c:	40004800 	.word	0x40004800
 8006a10:	40004c00 	.word	0x40004c00
 8006a14:	40005000 	.word	0x40005000
 8006a18:	40011400 	.word	0x40011400
 8006a1c:	40007800 	.word	0x40007800
 8006a20:	2310      	movs	r3, #16
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e02c      	b.n	8006a80 <UART_SetConfig+0x348>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a72      	ldr	r2, [pc, #456]	@ (8006bf4 <UART_SetConfig+0x4bc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d125      	bne.n	8006a7c <UART_SetConfig+0x344>
 8006a30:	4b71      	ldr	r3, [pc, #452]	@ (8006bf8 <UART_SetConfig+0x4c0>)
 8006a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a36:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006a3a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006a3e:	d017      	beq.n	8006a70 <UART_SetConfig+0x338>
 8006a40:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006a44:	d817      	bhi.n	8006a76 <UART_SetConfig+0x33e>
 8006a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a4a:	d00b      	beq.n	8006a64 <UART_SetConfig+0x32c>
 8006a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a50:	d811      	bhi.n	8006a76 <UART_SetConfig+0x33e>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <UART_SetConfig+0x326>
 8006a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a5a:	d006      	beq.n	8006a6a <UART_SetConfig+0x332>
 8006a5c:	e00b      	b.n	8006a76 <UART_SetConfig+0x33e>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	77fb      	strb	r3, [r7, #31]
 8006a62:	e00d      	b.n	8006a80 <UART_SetConfig+0x348>
 8006a64:	2302      	movs	r3, #2
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e00a      	b.n	8006a80 <UART_SetConfig+0x348>
 8006a6a:	2304      	movs	r3, #4
 8006a6c:	77fb      	strb	r3, [r7, #31]
 8006a6e:	e007      	b.n	8006a80 <UART_SetConfig+0x348>
 8006a70:	2308      	movs	r3, #8
 8006a72:	77fb      	strb	r3, [r7, #31]
 8006a74:	e004      	b.n	8006a80 <UART_SetConfig+0x348>
 8006a76:	2310      	movs	r3, #16
 8006a78:	77fb      	strb	r3, [r7, #31]
 8006a7a:	e001      	b.n	8006a80 <UART_SetConfig+0x348>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a88:	d15b      	bne.n	8006b42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a8a:	7ffb      	ldrb	r3, [r7, #31]
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d828      	bhi.n	8006ae2 <UART_SetConfig+0x3aa>
 8006a90:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <UART_SetConfig+0x360>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006abd 	.word	0x08006abd
 8006a9c:	08006ac5 	.word	0x08006ac5
 8006aa0:	08006acd 	.word	0x08006acd
 8006aa4:	08006ae3 	.word	0x08006ae3
 8006aa8:	08006ad3 	.word	0x08006ad3
 8006aac:	08006ae3 	.word	0x08006ae3
 8006ab0:	08006ae3 	.word	0x08006ae3
 8006ab4:	08006ae3 	.word	0x08006ae3
 8006ab8:	08006adb 	.word	0x08006adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006abc:	f7fd f948 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 8006ac0:	61b8      	str	r0, [r7, #24]
        break;
 8006ac2:	e013      	b.n	8006aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac4:	f7fd f958 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 8006ac8:	61b8      	str	r0, [r7, #24]
        break;
 8006aca:	e00f      	b.n	8006aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006acc:	4b4b      	ldr	r3, [pc, #300]	@ (8006bfc <UART_SetConfig+0x4c4>)
 8006ace:	61bb      	str	r3, [r7, #24]
        break;
 8006ad0:	e00c      	b.n	8006aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad2:	f7fd f82b 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8006ad6:	61b8      	str	r0, [r7, #24]
        break;
 8006ad8:	e008      	b.n	8006aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ade:	61bb      	str	r3, [r7, #24]
        break;
 8006ae0:	e004      	b.n	8006aec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8006aea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d074      	beq.n	8006bdc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	005a      	lsls	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	085b      	lsrs	r3, r3, #1
 8006afc:	441a      	add	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b0f      	cmp	r3, #15
 8006b0c:	d916      	bls.n	8006b3c <UART_SetConfig+0x404>
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b14:	d212      	bcs.n	8006b3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f023 030f 	bic.w	r3, r3, #15
 8006b1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	89fb      	ldrh	r3, [r7, #14]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	89fa      	ldrh	r2, [r7, #14]
 8006b38:	60da      	str	r2, [r3, #12]
 8006b3a:	e04f      	b.n	8006bdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	77bb      	strb	r3, [r7, #30]
 8006b40:	e04c      	b.n	8006bdc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d828      	bhi.n	8006b9a <UART_SetConfig+0x462>
 8006b48:	a201      	add	r2, pc, #4	@ (adr r2, 8006b50 <UART_SetConfig+0x418>)
 8006b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006b75 	.word	0x08006b75
 8006b54:	08006b7d 	.word	0x08006b7d
 8006b58:	08006b85 	.word	0x08006b85
 8006b5c:	08006b9b 	.word	0x08006b9b
 8006b60:	08006b8b 	.word	0x08006b8b
 8006b64:	08006b9b 	.word	0x08006b9b
 8006b68:	08006b9b 	.word	0x08006b9b
 8006b6c:	08006b9b 	.word	0x08006b9b
 8006b70:	08006b93 	.word	0x08006b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b74:	f7fd f8ec 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 8006b78:	61b8      	str	r0, [r7, #24]
        break;
 8006b7a:	e013      	b.n	8006ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b7c:	f7fd f8fc 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 8006b80:	61b8      	str	r0, [r7, #24]
        break;
 8006b82:	e00f      	b.n	8006ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b84:	4b1d      	ldr	r3, [pc, #116]	@ (8006bfc <UART_SetConfig+0x4c4>)
 8006b86:	61bb      	str	r3, [r7, #24]
        break;
 8006b88:	e00c      	b.n	8006ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b8a:	f7fc ffcf 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8006b8e:	61b8      	str	r0, [r7, #24]
        break;
 8006b90:	e008      	b.n	8006ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b96:	61bb      	str	r3, [r7, #24]
        break;
 8006b98:	e004      	b.n	8006ba4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	77bb      	strb	r3, [r7, #30]
        break;
 8006ba2:	bf00      	nop
    }

    if (pclk != 0U)
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d018      	beq.n	8006bdc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	085a      	lsrs	r2, r3, #1
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b0f      	cmp	r3, #15
 8006bc2:	d909      	bls.n	8006bd8 <UART_SetConfig+0x4a0>
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bca:	d205      	bcs.n	8006bd8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60da      	str	r2, [r3, #12]
 8006bd6:	e001      	b.n	8006bdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006be8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40007c00 	.word	0x40007c00
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	00f42400 	.word	0x00f42400

08006c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01a      	beq.n	8006d16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cfe:	d10a      	bne.n	8006d16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]
  }
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b098      	sub	sp, #96	@ 0x60
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d54:	f7fb fc06 	bl	8002564 <HAL_GetTick>
 8006d58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d12e      	bne.n	8006dc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d70:	2200      	movs	r2, #0
 8006d72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f88c 	bl	8006e94 <UART_WaitOnFlagUntilTimeout>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d021      	beq.n	8006dc6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006da2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006da6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e6      	bne.n	8006d82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e062      	b.n	8006e8c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d149      	bne.n	8006e68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f856 	bl	8006e94 <UART_WaitOnFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d03c      	beq.n	8006e68 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	623b      	str	r3, [r7, #32]
   return(result);
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e6      	bne.n	8006dee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3308      	adds	r3, #8
 8006e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0301 	bic.w	r3, r3, #1
 8006e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e40:	61fa      	str	r2, [r7, #28]
 8006e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	69b9      	ldr	r1, [r7, #24]
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e5      	bne.n	8006e20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e011      	b.n	8006e8c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3758      	adds	r7, #88	@ 0x58
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea4:	e04f      	b.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eac:	d04b      	beq.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eae:	f7fb fb59 	bl	8002564 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d302      	bcc.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e04e      	b.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d037      	beq.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b80      	cmp	r3, #128	@ 0x80
 8006eda:	d034      	beq.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2b40      	cmp	r3, #64	@ 0x40
 8006ee0:	d031      	beq.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d110      	bne.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f838 	bl	8006f6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2208      	movs	r2, #8
 8006f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e029      	b.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f20:	d111      	bne.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f81e 	bl	8006f6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e00f      	b.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69da      	ldr	r2, [r3, #28]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	bf0c      	ite	eq
 8006f56:	2301      	moveq	r3, #1
 8006f58:	2300      	movne	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d0a0      	beq.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b095      	sub	sp, #84	@ 0x54
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e6      	bne.n	8006f76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3308      	adds	r3, #8
 8006fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e5      	bne.n	8006fa8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d118      	bne.n	8007016 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f023 0310 	bic.w	r3, r3, #16
 8006ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007002:	61bb      	str	r3, [r7, #24]
 8007004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6979      	ldr	r1, [r7, #20]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	613b      	str	r3, [r7, #16]
   return(result);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e6      	bne.n	8006fe4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800702a:	bf00      	nop
 800702c:	3754      	adds	r7, #84	@ 0x54
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <memset>:
 8007036:	4402      	add	r2, r0
 8007038:	4603      	mov	r3, r0
 800703a:	4293      	cmp	r3, r2
 800703c:	d100      	bne.n	8007040 <memset+0xa>
 800703e:	4770      	bx	lr
 8007040:	f803 1b01 	strb.w	r1, [r3], #1
 8007044:	e7f9      	b.n	800703a <memset+0x4>
	...

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4d0d      	ldr	r5, [pc, #52]	@ (8007080 <__libc_init_array+0x38>)
 800704c:	4c0d      	ldr	r4, [pc, #52]	@ (8007084 <__libc_init_array+0x3c>)
 800704e:	1b64      	subs	r4, r4, r5
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	2600      	movs	r6, #0
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	4d0b      	ldr	r5, [pc, #44]	@ (8007088 <__libc_init_array+0x40>)
 800705a:	4c0c      	ldr	r4, [pc, #48]	@ (800708c <__libc_init_array+0x44>)
 800705c:	f000 f826 	bl	80070ac <_init>
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	2600      	movs	r6, #0
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	f855 3b04 	ldr.w	r3, [r5], #4
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	080070e4 	.word	0x080070e4
 8007084:	080070e4 	.word	0x080070e4
 8007088:	080070e4 	.word	0x080070e4
 800708c:	080070e8 	.word	0x080070e8

08007090 <memcpy>:
 8007090:	440a      	add	r2, r1
 8007092:	4291      	cmp	r1, r2
 8007094:	f100 33ff 	add.w	r3, r0, #4294967295
 8007098:	d100      	bne.n	800709c <memcpy+0xc>
 800709a:	4770      	bx	lr
 800709c:	b510      	push	{r4, lr}
 800709e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070a6:	4291      	cmp	r1, r2
 80070a8:	d1f9      	bne.n	800709e <memcpy+0xe>
 80070aa:	bd10      	pop	{r4, pc}

080070ac <_init>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr

080070b8 <_fini>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr
